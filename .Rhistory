if (ncol(t) == 12){
names(t)<- c('G','GV','H','HV','E','EV','sampletime','Targ','block','subject','blocknum','task')
}
if (ncol(t) == 8){
names(t)<-c('Hv','Ep','Targ','block','subject','blocknum','task')
}
t %>%
mutate(time=row_number())->
t
return(t)
}
h<-loadnewheadfree(path=path)
head(h)
ncol(h)
loadnewheadfree<- function(referencefile=NULL,path="~/GitHub/ConcussionGaze/kdata/"){
require(stringr)
require(dplyr)
require(data.table)
#This function loads .csv files in a particular folder. They must have the same columns for rbind
#Saves time by only reading the csv when necessary
#get names of all files in path
files <- list.files(path=path,pattern='*.txt')
#extract neuron name eg. Bee-01
# names<-sapply(files, str_match,"^[a-zA-Z]+-[0-9]+",USE.NAMES=FALSE)
names<-sapply(files, str_match,"^[a-zA-Z0-9]+",USE.NAMES=FALSE)
# check for new cells
if (!is.null(referencefile)){
files<-files[!names %in% referencefile$neuron] #comparison
}
nfiles<-length(files)
if (nfiles>0){
message(c('New Files: ',files))
loadedfiles <- lapply(paste(path,files,sep=''),read.csv,sep='\t',header=FALSE)
t<-data.frame()
temp<- NULL
# t.old<-NULL
for (i in 1:nfiles) {
f<- files[i]
message(paste('Loading:',f))
# temp[[i]]=loadedfiles[[i]]
# names<-str_match(f,"(^[a-zA-Z]+)-([0-9]+)")
# loadedfiles[[i]]$block<-names[1]
# loadedfiles[[i]]$subject<-names[2]
# loadedfiles[[i]]$blocknum<-as.numeric(names[3])
#updated for 2-25-2018
#remove extra rows
# if (ncol(loadedfiles[[i]])>8){
#   loadedfiles[[i]]<- select(loadedfiles[[i]],1:8)
# }
#files are named with Subject ID bU07 and block ST1 with ST standing for Saccade Task
names<-str_match(f,"(^[a-zA-Z0-9]{4})([a-zA-Z0-9]{3})")
loadedfiles[[i]]$block<-names[1]
loadedfiles[[i]]$subject<-names[2]
loadedfiles[[i]]$blocknum<-as.numeric(str_sub(names[3],3))
task<-str_sub(names[3],1,2)
loadedfiles[[i]]$task<- task
if (task=='AS' & ncol(loadedfiles[[i]])>8){ #antisaccade dask needs target data fixed
#'There are three targets in the anti saccade files
#'but only the second is useful. The central fixation is always at zero
#'If this changes, the value in V7 should be used instead of zero
targ<- loadedfiles[[i]]$V8
targ<- replace(targ,targ< -80,0)
loadedfiles[[i]]$V8=targ
}
}
t <-rbindlist(loadedfiles,fill = TRUE)
# t<- dplyr::select(t, -thp,-tvp,-time)
}else{
message('********NO NEW DATA********')
t<-NULL
}
if (ncol(t) == 12){
names(t)<- c('G','GV','H','HV','E','EV','sampletime','Targ','block','subject','blocknum','task')
}
if (ncol(t) == 7){
names(t)<-c('Hv','Ep','Targ','block','subject','blocknum','task')
}
t %>%
mutate(time=row_number())->
t
return(t)
}
h<-loadnewheadfree(path=path)
head(h)
library(ggplot2)
library(dplyr)
library(broom)
source('knighthelperfunctions.R')
samplerate<- 304.7508/1000
path<- "F:/dropbox/kdata/newform/"
h<-loadnewheadfree(path=path)
h %>%
group_by(block) %>%
do(AdjustCalibration(applyfilter = FALSE))->
ht
h %>%
group_by(block) %>%
do(AdjustCalibration(.,applyfilter = FALSE))->
ht
AdjustCalibration<-function(h,eyegain=1,headgain=1,eyeoffset=0,headoffset=0,
applyfilter=TRUE,filterfreq=0.00007,skipsamples=500,
samplerate=0.3047508){
require(dplyr)
h %>%
mutate(time=row_number()) %>%
filter(time>skipsamples) %>%
mutate(H=cumsum(Hv*headgain)/samplerate/1000+headoffset)->
h
if (applyfilter){
require(signal) #for butterworth
filter<-dplyr::filter
filterButter<- function(y,freqs=0.00007,type='high'){
require(signal)
bf <- butter(2, freqs,type=type)
# bf <- butter(2, c(.0005,.006))
return(filtfilt(bf, y))
}
h <-mutate(h,H=filterButter(H,freqs=filterfreq))
}
h %>%
mutate(E=E*eyegain+eyeoffset,
G=H+E)->
h
}
h %>%
group_by(block) %>%
do(AdjustCalibration(.,applyfilter = FALSE))->
ht
AdjustCalibration<-function(h,eyegain=1,headgain=1,eyeoffset=0,headoffset=0,
applyfilter=TRUE,filterfreq=0.00007,skipsamples=500,
samplerate=0.3047508){
require(dplyr)
h %>%
mutate(time=row_number()) %>%
dplyr::filter(time>skipsamples) %>%
mutate(H=cumsum(Hv*headgain)/samplerate/1000+headoffset)->
h
if (applyfilter){
require(signal) #for butterworth
filter<-dplyr::filter
filterButter<- function(y,freqs=0.00007,type='high'){
require(signal)
bf <- butter(2, freqs,type=type)
# bf <- butter(2, c(.0005,.006))
return(filtfilt(bf, y))
}
h <-mutate(h,H=filterButter(H,freqs=filterfreq))
}
h %>%
mutate(E=E*eyegain+eyeoffset,
G=H+E)->
h
}
h %>%
group_by(block) %>%
do(AdjustCalibration(.,applyfilter = FALSE))->
ht
names(h)
AdjustCalibration<-function(h,eyegain=1,headgain=1,eyeoffset=0,headoffset=0,
applyfilter=TRUE,filterfreq=0.00007,skipsamples=500,
samplerate=0.3047508){
require(dplyr)
h %>%
mutate(time=row_number()) %>%
dplyr::filter(time>skipsamples) %>%
mutate(H=cumsum(HV*headgain)/samplerate/1000+headoffset)->
h
if (applyfilter){
require(signal) #for butterworth
filter<-dplyr::filter
filterButter<- function(y,freqs=0.00007,type='high'){
require(signal)
bf <- butter(2, freqs,type=type)
# bf <- butter(2, c(.0005,.006))
return(filtfilt(bf, y))
}
h <-mutate(h,H=filterButter(H,freqs=filterfreq))
}
h %>%
mutate(E=E*eyegain+eyeoffset,
G=H+E)->
h
}
loadnewheadfree<- function(referencefile=NULL,path="~/GitHub/ConcussionGaze/kdata/"){
require(stringr)
require(dplyr)
require(data.table)
#This function loads .csv files in a particular folder. They must have the same columns for rbind
#Saves time by only reading the csv when necessary
#get names of all files in path
files <- list.files(path=path,pattern='*.txt')
#extract neuron name eg. Bee-01
# names<-sapply(files, str_match,"^[a-zA-Z]+-[0-9]+",USE.NAMES=FALSE)
names<-sapply(files, str_match,"^[a-zA-Z0-9]+",USE.NAMES=FALSE)
# check for new cells
if (!is.null(referencefile)){
files<-files[!names %in% referencefile$neuron] #comparison
}
nfiles<-length(files)
if (nfiles>0){
message(c('New Files: ',files))
loadedfiles <- lapply(paste(path,files,sep=''),read.csv,sep='\t',header=FALSE)
t<-data.frame()
temp<- NULL
# t.old<-NULL
for (i in 1:nfiles) {
f<- files[i]
message(paste('Loading:',f))
# temp[[i]]=loadedfiles[[i]]
# names<-str_match(f,"(^[a-zA-Z]+)-([0-9]+)")
# loadedfiles[[i]]$block<-names[1]
# loadedfiles[[i]]$subject<-names[2]
# loadedfiles[[i]]$blocknum<-as.numeric(names[3])
#updated for 2-25-2018
#remove extra rows
# if (ncol(loadedfiles[[i]])>8){
#   loadedfiles[[i]]<- select(loadedfiles[[i]],1:8)
# }
#files are named with Subject ID bU07 and block ST1 with ST standing for Saccade Task
names<-str_match(f,"(^[a-zA-Z0-9]{4})([a-zA-Z0-9]{3})")
loadedfiles[[i]]$block<-names[1]
loadedfiles[[i]]$subject<-names[2]
loadedfiles[[i]]$blocknum<-as.numeric(str_sub(names[3],3))
task<-str_sub(names[3],1,2)
loadedfiles[[i]]$task<- task
if (task=='AS' & ncol(loadedfiles[[i]])>8){ #antisaccade dask needs target data fixed
#'There are three targets in the anti saccade files
#'but only the second is useful. The central fixation is always at zero
#'If this changes, the value in V7 should be used instead of zero
targ<- loadedfiles[[i]]$V8
targ<- replace(targ,targ< -80,0)
loadedfiles[[i]]$V8=targ
}
}
t <-rbindlist(loadedfiles,fill = TRUE)
# t<- dplyr::select(t, -thp,-tvp,-time)
}else{
message('********NO NEW DATA********')
t<-NULL
}
if (ncol(t) == 12){
names(t)<- c('G','GV','H','HV','E','EV','sampletime','Targ','block','subject','blocknum','task')
}
if (ncol(t) == 7){
names(t)<-c('HV','E','Targ','block','subject','blocknum','task')
}
t %>%
mutate(time=row_number())->
t
return(t)
}
h<-loadnewheadfree(path=path)
h %>%
group_by(block) %>%
do(AdjustCalibration(.,applyfilter = FALSE))->
ht
head(ht)
library(ggplot2)
qplot(time,H,data=filter(ht,block=='Cj21As1'))
filter<-dplyr::filter
qplot(time,H,data=filter(ht,block=='Cj21As1'))
qplot(time,H,data=filter(ht,block=='Cj21AS1'))
qplot(time,H,data=filter(ht,block=='Cj21AS2'))
ht %>%
group_by(block) %>%
summarize(slope=coef(lm(time ~ H,data=.)[2]))->
hs
ht %>%
group_by(block) %>%
summarize(ss=coef(lm(time ~ H,data=.)[2]))->
hs
ht %>%
group_by(block) %>%
summarize(m=lm(time ~ H,data=.)))->
hs
ht %>%
group_by(block) %>%
summarize(m=lm(time ~ H,data=.))->
hs
names(ht)
lm(H~time,data=ht)
coef(lm(H~time,data=ht))[2]
ht %>%
group_by(block) %>%
summarize(s=coef(lm(H~time,data=.))[2])->
hs
hs
qplot(time,H*(-0.00299*time),data=ht)
qplot(time,H*(0.00299*time),data=filter(ht,block=='Cj21As1')
qplot(time,H+(0.00299*time),data=filter(ht,block=='Cj21As1')
qplot(time,H+(0.00299*time),data=filter(ht,block=='Cj21As1'))
qplot(time,H+(0.00299*time),data=filter(ht,block=='Cj21AS1'))
qplot(time,H+(0.0028*time),data=filter(ht,block=='Cj21AS1'))
qplot(time,H+(0.00275*time),data=filter(ht,block=='Cj21AS1'))
qplot(time,H+(0.00277*time),data=filter(ht,block=='Cj21AS1'))
qplot(time,H+(0.00277*time),data=filter(ht,block=='Cj21AS2'))
qplot(time,H+(0.00299*time),data=filter(ht,block=='Cj21AS2'))
lm(H~time,data=filter(ht,block=='Cj21As2'))
lm(H~time,data=filter(ht,block=='Cj21AS2'))
unique(h$block)
lm(H~time,data=filter(ht,block=='V032AS1'))
lm(H~time,data=filter(ht,block=='V032AS2'))
lm(H~time,data=filter(ht,block=='VO32AS1'))
lm(H~time,data=filter(ht,block=='VO35AS1'))
lm(H~time,data=filter(ht,block=='VO35AS2'))
ht %>%
group_by(block) %>%
summarize(s=coef(lm(H~time,data=.))[2])->
hs
hs
ht %>%
group_by(block) %>%
do(s=coef(lm(H~time,data=.))[2])->
hs
hs
ht %>%
group_by(block) %>%
do(s=coef(lm(H~time,data=.))[2]) %>%
mutate(s=unlist(s))->
hs
hs
ht<- left_join(ht,s)
ht %>%
left_join(hs,by='block') %>%
group_by(block) %>%
mutate(H=H+(time*s))->
hht
qplot(time,H,data=hht)
hs
ht %>%
left_join(hs,by='block') %>%
group_by(block) %>%
mutate(H=H-(time*s))->
hht
qplot(time,H,data=hht)
head(hht)
ht %>%
left_join(hs,by='block') %>%
group_by(block) %>%
mutate(H=H-(time*s),
G=H+E)->
hht
qplot(time,G,data=filter(hht,block=='VO35AS2'))
qplot(time,G,data=filter(hht,block=='VO35AS1'))
qplot(time,G,data=filter(hht,block=='Cj21AS2'))
hs
qplot(time,H+(0.0028*time),data=filter(ht,block=='Cj21AS1'))
qplot(time,H+(0.00277*time),data=filter(ht,block=='Cj21AS1'))
qplot(time,H+(0.00310*time),data=filter(ht,block=='Cj21AS2'))
qplot(time,H+(0.00307*time),data=filter(ht,block=='Cj21AS2'))
qplot(time,H+(0.00306*time),data=filter(ht,block=='Cj21AS2'))
qplot(time,H+(0.00305*time),data=filter(ht,block=='Cj21AS2'),geom='line')
qplot(time,H+(0.00321*time),data=filter(ht,block=='VO35AS1'),geom='line')
qplot(time,H+(0.00321*time),data=filter(ht,block=='VO35AS2'),geom='line')
qplot(time,H+(0.00289*time),data=filter(ht,block=='VO35AS2'),geom='line')
qplot(time,H+(0.00286*time),data=filter(ht,block=='VO35AS2'),geom='line')
qplot(time,H+(0.00319*time),data=filter(ht,block=='VO35AS1'),geom='line')
qplot(time,H,data=filter(ht,block=='VO35AS1'),geom='line')
qplot(time,H,data=filter(ht,block=='VO35AS1'),geom='line')+
stat_smooth(method='lm',color='red')
qplot(time,H,data=filter(ht,block=='VO35AS1'),geom='line')+
stat_smooth(method='lm',formula=poly(2),color='red')
qplot(time,H,data=filter(ht,block=='VO35AS1'),geom='line')+
stat_smooth(method='lm',formula=poly(x,2),color='red')
lm(H~time,data=filter(ht,block=='VO35AS1'))
lm(H~poly(time,2),data=filter(ht,block=='VO35AS1'))
?poly
poly<-stats::poly
qplot(time,H,data=filter(ht,block=='VO35AS1'),geom='line')+
stat_smooth(method='lm',formula=poly(x,2),color='red')
qplot(time,H,data=filter(ht,block=='VO35AS1'),geom='line')+
stat_smooth(method='lm',formula=poly(time,2),color='red')
qplot(time,H,data=filter(ht,block=='VO35AS1'),geom='line')+
stat_smooth(method='lm',formula='poly(time,2)',color='red')
qplot(time,H,data=filter(ht,block=='VO35AS1'),geom='line')+
stat_smooth(method='lm',formula='poly(x,2)',color='red')
qplot(time,H,data=filter(ht,block=='VO35AS1'),geom='line')+
stat_smooth(method='lm',formula=y~poly(x,2),color='red')
lm(H~poly(time,2),data=filter(ht,block=='VO35AS1'))
mod<-lm(H~poly(time,2),data=filter(ht,block=='VO35AS1'))
tt<- filter(h,block=='VO35AS1')
qplot(time,H,data=tt,geom='line')
tt<- filter(ht,block=='VO35AS1')
qplot(time,H,data=tt,geom='line')
tt<- mutate(Hp=predict(mod,newdata=tt))
tt<- mutate(tt,Hp=predict(mod,newdata=tt))
qplot(time,Hp,data=tt,geom='line')
qplot(time,H-Hp,data=tt,geom='line')
mod<-lm(H~poly(time,3),data=filter(ht,block=='VO35AS1'))
tt<- mutate(tt,Hp=predict(mod,newdata=tt))
qplot(time,H-Hp,data=tt,geom='line')
mod<-lm(H~poly(time,5),data=filter(ht,block=='VO35AS1'))
tt<- mutate(tt,Hp=predict(mod,newdata=tt))
qplot(time,H-Hp,data=tt,geom='line')
mod<-lm(H~poly(time,3),data=filter(ht,block=='VO35AS1'))
tt<- mutate(tt,Hp=predict(mod,newdata=tt))
qplot(time,H-Hp,data=tt,geom='line')
fixH<- function(t){
mod<- lm(H~poly(time,3),data=t)
t %>%
mutate(H=H-predict(mod,newdata=t))->
t
return(t)
}
h %>%
group_by(block) %>%
do(AdjustCalibration(.,applyfilter = FALSE)) %>%
do(fixH(.))->
ht
qplot(time,H,data=filter(hht,block=='Cj21AS2'))
qplot(time,H,data=filter(hht,block=='Cj21AS2'),geom-'line')
qplot(time,H,data=filter(ht,block=='Cj21AS2'),geom-'line')
qplot(time,H,data=filter(ht,block=='Cj21AS2'),geom='line')
h %>%
group_by(block) %>%
do(AdjustCalibration(.,applyfilter = FALSE)) %>%
do(fixH(.)) %>%
mutate(G=H+E)->
ht
qplot(time,H,data=filter(ht,block=='Cj21AS1'),geom='line')
qplot(time,H,data=ht,color=block,geom='line')
qplot(time,G,data=ht,color=block,geom='line')
qplot(time,E,data=ht,color=block,geom='line')
hraw<-h
h<-ht
h%>%
select(G,H,Targ,block,subject,task)%>%
group_by(block) %>%
filter(!is.na(G)) %>%
mutate(time=row_number(),
Graw=G,
G=replace(smooth(G,"3R"),G==0,NA), #mark missing data as NA rather than 0
Gnospline=G,
G= applyspline(G,6),
target.velocity=parabolicdiff(Targ,7)*samplerate,
Gv=parabolicdiff(G,7)*samplerate, #calculate velocity
Hv=parabolicdiff(H,7)*samplerate,
# gazeshifts=markMovementsDouble(Gv,threshold1=100,threshold2=10),
gazeshifts=markSaccadesDouble(Gv,threshold1=100,threshold2=20,
driftcorrect = TRUE,markFixations = FALSE),
headmovement=markMovementsDouble(Hv,threshold1=10,threshold2=4)) %>%
do(markTagetMovements(t=.,buffer=200,threshold=200,trial.length=500))%>%
filter(!is.na(trialnum))->
h
qplot(time,G,data=filter(h,block='Cj21AS1',trialnum=1))
qplot(time,G,data=filter(h,block='Cj21AS1',trialnum==1))
qplot(time,G,data=filter(h,block=='Cj21AS1',trialnum==1))
qplot(time,Targ,data=filter(h,block=='Cj21AS1',trialnum==1))
qplot(counter,Targ,data=filter(h,block=='Cj21AS1',trialnum==1))
qplot(counter,Targ,data=filter(h,block=='Cj21AS1',trialnum==1))+
geom_line(aes(counter,G),color='darkgreen')
qplot(counter,Targ,data=filter(h,block=='Cj21AS1',trialnum==2))+
geom_line(aes(counter,G),color='darkgreen')
qplot(counter,Targ,data=filter(h,block=='Cj21AS1',trialnum==3))+
geom_line(aes(counter,G),color='darkgreen')
qplot(counter,Targ,data=filter(h,block=='Cj21AS1',trialnum==4))+
geom_line(aes(counter,G),color='darkgreen')
qplot(counter,Targ,data=filter(h,block=='Cj21AS1',trialnum==5))+
geom_line(aes(counter,G),color='darkgreen')
qplot(counter,Targ,data=filter(h,block=='Cj21AS1',trialnum==6))+
geom_line(aes(counter,G),color='darkgreen')
qplot(counter,Targ,data=filter(h,block=='Cj21AS1',trialnum==7))+
geom_line(aes(counter,G),color='darkgreen')
h %>%
filter(!is.na(trialnum)) %>%
group_by(task,subject,block,trialnum) %>%
do(measureTrial(.))->
hm
names(hm)
hmr<-hm
hm %>%
mutate(recenter=(task=='AS' & abs(IGP)>10)) %>%
filter(!recenter) %>%
select(-recenter)->
hm
hm %>% group_by(block) %>% tally()
names(hm)
4
hmold<-readRDS('antisaccadeDashboard2018-3-29.RDS')
names(hmold)
hcombined<-bind_rows(hmold,hm)
head(hcombined)
saveRDS(hcombined,'antisaccadeDashboard2018-4-07.RDS')
hcombined %>%
group_by(block) %>%
summarize(total=n(),
anti=(gaze.amp*targ.amp)<1)->
hsum
names(hcombined)
hcombined %>%
group_by(block) %>%
summarize(total=n(),
anti=(gaze.amp*target.amp)<1)->
hsum
hcombined %>%
group_by(block) %>%
summarize(total=n(),
anti=sum((gaze.amp*target.amp)<1))->
hsum
hsum
hcombined %>%
group_by(block) %>%
summarize(total=n(),
anti=sum((gaze.amp*target.amp)<1),
percent=anti/total*100)->
hsum
hsum
ggplot(hsum)+
geom_bar(block,anti,stat='identity')
ggplot(hsum)+
geom_bar(aes(block,percent),stat='identity')
write.csv(hsum,'AntisaccadeSuccessRate.csv')
