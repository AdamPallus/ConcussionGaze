gaze.gain=gaze.amp/target.amp) %>%
filter(missing.gs<15,
gaze.onset.ms>150,
gaze.onset.ms<500,
abs(peak.gaze.velocity) > 200) %>%
ungroup() %>%
select(peak.gaze.velocity,
gaze.onset.ms,
head.onset.ms,
gaze.dur.ms,
gaze.gain,
peak.head.velocity,
head.contribution,
gaze.amp,
gaze.dur,
subject,
block,
blocknum,
trialnum,
target.amp,
head.amp,
IEPr,
gaze.steps,
total.gaze.amp,
total.gaze.dur,
total.head.contribution)->
hpp
names(h)
names(hm)
measureTrial<- function(tt, buffer=200){
#This function will receive data from one trial and return a one-row data frame
trial.length<- nrow(tt)
# task<-first(tt$task)
#identify the id number of the first saccade that satisfies the criteria
firstshift=min(tt$gazeshifts[buffer:trial.length],na.rm=T)
if (is.infinite(firstshift)){
#Don't bother measuring this trial if there isn't a primary gaze shift
# message(paste0('No primary gaze shift in: ',tt$trialnum[1]))
return(data.frame())
}
#In this block, we will reject any saccades with a delay of more than 150ms since the last saccade
#we will also reject saccades where the peak velocity is less than 200 ms as we assume they are corrective
if (length(unique(tt$gazeshifts)) > 2){
tt %>%
filter(!is.na(gazeshifts)) %>%
group_by(gazeshifts) %>%
summarize(start.time=first(time),
stop.time=last(time),
peak.gaze.velocity=max(Gv)) %>%
mutate(interval= start.time-lag(stop.time)) %>%
filter(interval<47, peak.gaze.velocity>200) -> #reject saccades that are separated by too much time (47 samples ~ 150 ms)
isi
good.saccades<- c(firstshift, isi$gazeshifts)
#delete them from the marking
good.gazeshifts=replace(tt$gazeshifts,!tt$gazeshifts %in% good.saccades,NA)
}else{
good.saccades<- firstshift
good.gazeshifts<- tt$gazeshifts
}
#measure gaze
fixation.velocity=mean(tt$Gv[buffer-100:buffer])
gaze.onset=max(first(tt$counter[good.gazeshifts==firstshift&!is.na(good.gazeshifts)]),1)
gaze.offset=last(tt$counter[good.gazeshifts==firstshift&!is.na(good.gazeshifts)])
gaze.dur=gaze.offset-gaze.onset
gaze.amp=tt$G[gaze.offset]-tt$G[gaze.onset]
total.gaze.offset=max(tt$counter[!is.na(good.gazeshifts)])
total.gaze.amp=tt$G[tt$counter==total.gaze.offset]-tt$G[tt$counter==gaze.onset]
total.gaze.dur=tt$G[total.gaze.offset]-tt$G[gaze.onset]
peak.gaze.velocity=maxabs(tt$Gv[good.gazeshifts==firstshift])
IHP=tt$H[tt$counter==gaze.onset]
IGP=tt$G[tt$counter==gaze.onset]
IEP=IGP-IHP
IEPr = IEP * sign(gaze.amp) #relative initial eye position
final.EP=tt$E[tt$counter==total.gaze.offset]
head.contribution=tt$H[tt$counter==gaze.offset]-IHP
total.head.contribution=tt$H[tt$counter==total.gaze.offset]-IHP #how much head moved during gaze shifts
#measure head
firsthead=min(tt$headmovement[buffer:trial.length],na.rm=T)
#set up a flag to determine whether we will be measuring head movements
head.onset<-NA
head.offset<-NA
peak.head.velocity<-NA
head.amp<-NA
if (!is.infinite(firsthead)){
head.onset=first(tt$counter[tt$headmovement==firsthead&!is.na(tt$headmovement)])
head.offset=last(tt$counter[tt$headmovement==firsthead&!is.na(tt$headmovement)])
if (head.onset<total.gaze.offset){ #ignore head movements that start after the gaze shifts are done
peak.head.velocity=maxabs(tt$Hv[tt$headmovement==firsthead])
head.amp=tt$H[tt$counter==head.offset]-tt$H[tt$counter==head.onset]
}
if (head.onset>(gaze.onset+50)){
head.onset=NA
head.offset=NA
peak.head.velocity=NA
head.amp=NA
}
}
#measure target
target.amp=tt$Targ[300]-tt$Targ[1]
#assess missing
Graw=replace(tt$Graw,tt$Graw==0,NA)
total.missing=sum(is.na(Graw))
missing.critical=sum(is.na(Graw[(buffer-100):(buffer+100)]))
missing.gs=sum(is.na(Graw[gaze.onset:total.gaze.offset]))
#gaze steps
gaze.steps=length(good.saccades)
#VOR
post.saccade.drift=mean(tt$Gv[(gaze.offset+10):(gaze.offset+20)])
post.saccade.head=mean(tt$Hv[(gaze.offset+10):(gaze.offset+20)])
Ev=tt$Gv-tt$Hv
post.saccade.eye=mean(Ev[(gaze.offset+10):(gaze.offset+20)])
post.saccade.VOR=post.saccade.eye/post.saccade.head
tt %>%
ungroup() %>%
summarize_at(c('block','trialnum','blocknum'),funs(first))->
d
# message(paste0('Attempting: ',tt$block[1],'-',tt$trialnum[1],'\n'))
df<- data.frame(#firstshift,
fixation.velocity,
gaze.onset,
gaze.offset,
gaze.dur,
gaze.amp,
total.gaze.offset,
total.gaze.amp,
total.gaze.dur,
peak.gaze.velocity,
gaze.steps,
IHP,
IGP,
IEP,
IEPr,
head.contribution,
total.head.contribution,
post.saccade.drift,
post.saccade.head,
post.saccade.eye,
post.saccade.VOR,
#firsthead,
head.onset,
head.offset,
peak.head.velocity,
head.amp,
target.amp,
total.missing,
missing.critical,
missing.gs#,
# task
)
# message(paste0('Success: ',tt$trialnum[1],'\n'))
if (nrow(df) ==1){
d<- bind_cols(d,df)
}else{
return(data.frame())
}
}
#measure trials join to previous table if needed
h %>%
filter(!is.na(trialnum)) %>%
group_by(task,subject,block,trialnum) %>%
do(measureTrial(.))->
hm
names(hm)
hm %>%
mutate(gaze.onset.ms=(gaze.onset-200)/samplerate,
head.onset.ms=(head.onset-200)/samplerate,
gaze.dur.ms=(gaze.dur)/samplerate,
IEPr=IEP*sign(gaze.amp),
gaze.gain=gaze.amp/target.amp) %>%
filter(missing.gs<15,
gaze.onset.ms>150,
gaze.onset.ms<500,
abs(peak.gaze.velocity) > 200) %>%
ungroup() %>%
select(peak.gaze.velocity,
gaze.onset.ms,
head.onset.ms,
gaze.dur.ms,
gaze.gain,
peak.head.velocity,
head.contribution,
gaze.amp,
gaze.dur,
subject,
block,
blocknum,
trialnum,
target.amp,
head.amp,
IEPr,
gaze.steps,
total.gaze.amp,
total.gaze.dur,
total.head.contribution)->
hpp
hpp <- mutate(hpp,amp.bins.20 = cut(abs(target.amp),breaks=c(0,20,40,60,80)))
hpp <- mutate(hpp,amp.bins.15 = cut(abs(target.amp),breaks=c(0,15,30,45,60,75,90)))
hpp <- mutate(hpp,amp.bins.10 = cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
hpp <- mutate(hpp,gaze.amp.bins.10 = cut(abs(gaze.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
#remove NA bins and extra blocks
hpp %>%
filter(!is.na(amp.bins.15))->
hpp
hpp %>%
mutate(blocknum= as.factor(blocknum),
block= as.factor(block),
subject=as.factor(subject))->
dataset
goodsubjects<-c('Cj21','Fq58','wR49','CP48','VO35','xL16')
getstats<- function(d,form){
nblocks<-length(unique(d$blocknum))
p.gv=-10
p.latency= 10
p.dur = -10
p.gain = -10
p.steps = -10
if (nblocks == 2){
p.gv=wilcox.test(abs(peak.gaze.velocity) ~ blocknum,data=d)$p.value
p.latency= wilcox.test(gaze.onset.ms ~ blocknum,data=d)$p.value
p.dur = wilcox.test(gaze.dur ~ blocknum,data=d)$p.value
p.gain = wilcox.test(gaze.gain ~ blocknum,data=d)$p.value
p.steps = wilcox.test(gaze.steps ~ blocknum,data=d)$p.value
}
if (nblocks > 2){
p.gv=kruskal.test(abs(peak.gaze.velocity) ~ blocknum,data=d)$p.value
p.latency= kruskal.test(gaze.onset.ms ~ blocknum,data=d)$p.value
p.dur = kruskal.test(gaze.dur.ms ~ blocknum,data=d)$p.value
p.gain = kruskal.test(gaze.gain ~ blocknum,data=d)$p.value
p.steps = kruskal.test(gaze.steps ~ blocknum,data=d)$p.value
}
# return(list(p.gv,p.latency,p.dur,p.gain,p.steps))
l<-list(p.gv,p.latency,p.dur,p.gain,p.steps)
l[is.na(l)]<- 10
l<- as.data.frame(l)
names(l) <- c('p.gv','p.latency','p.dur','p.gain','p.steps')
d %>%
summarize(mean.gv=mean(abs(peak.gaze.velocity)),
mean.latency=mean(gaze.onset.ms),
mean.dur=mean(gaze.dur.ms),
mean.gain=mean(gaze.gain),
mean.steps=mean(gaze.steps),
sd.gv=sd(abs(peak.gaze.velocity)),
sd.latency=sd(gaze.onset.ms),
sd.dur=sd(gaze.dur.ms),
sd.gain=sd(gaze.gain),
sd.steps=sd(gaze.steps),
n=n()) %>%
bind_cols(l)->
l
return(l)
}
dataset %>%
filter(subject %in% goodsubjects) %>%
group_by(subject,blocknum,amp.bins.15) %>%
tally() ->
dt
filenames<- c('Gv','HC','Glat','Gdur','Ggain','Gsteps')
yvars<- c('abs(peak.gaze.velocity)','abs(head.contribution)','gaze.onset.ms',
'gaze.dur.ms','gaze.gain','gaze.steps')
ylabs<- c('Peak gaze velocity (deg/s)','Head contribution (deg)','Gaze latency (ms)',
'Gaze duration (ms)','Gaze gain','Gaze steps')
ylabspot<- c(700,50,650,650,5,3)
subjects<-c('xL16')
saveXL<-function(plt,filename,width=4,height=6,y='abs(peak.gaze.velocity)',
xlabel='Time point',ylabel='Peak gaze velocity (deg/s)',
ylabspot=700){
cairo_pdf(filename,width=width,height=height)
p<-plt %>%
ggboxplot(x = "blocknum", y=y,
color = "blocknum", palette = "jco",
# facet.by = c("subject","amp.bins.15"), short.panel.labs = TRUE)
facet.by = c("subject","amp.bins.15"), short.panel.labs = TRUE) +
stat_compare_means(label.y=ylabspot)+
stat_compare_means(comparisons = list(c('1','2'),c('1','3'),c('2','3')))+
# stat_compare_means(label = "p.signif")+
xlab('Time point')+
ylab(ylabel)+
theme(legend.position = 'none')
print(p)
dev.off()
}
for (i in seq_along(subjects)){
fn<- paste0(filenames,subjects[i],'.pdf')
toPlot<-filter(dataset,
amp.bins.15=='(30,45]',
subject==subjects[i])
for (j in seq_along(fn)){
saveXL(toPlot,fn[j],widt=5,height=5,
y=yvars[j],ylabel=ylabs[j],
ylabspot=ylabspot[j])
}
}
library(ggpubr)
for (i in seq_along(subjects)){
fn<- paste0(filenames,subjects[i],'.pdf')
toPlot<-filter(dataset,
amp.bins.15=='(30,45]',
subject==subjects[i])
for (j in seq_along(fn)){
saveXL(toPlot,fn[j],widt=5,height=5,
y=yvars[j],ylabel=ylabs[j],
ylabspot=ylabspot[j])
}
}
####Multiple Comparisons----
dataset %>%
filter(subject=='xL16',as.numeric(blocknum)>2,amp.bins.15=='(30,45]') %>%
ggboxplot(dataset, x = "blocknum", y='abs(peak.gaze.velocity)',
color = "blocknum", palette = "npg",
# facet.by = c("subject","amp.bins.15"), short.panel.labs = TRUE)
facet.by = c("subject","amp.bins.15"), short.panel.labs = TRUE) +
stat_compare_means(label.y=700)+
stat_compare_means(comparisons = list(c('5','6'),c('5','7'),c('6','7')))+
# stat_compare_means(label = "p.signif")+
xlab('Time point')+
ylab('Gaze peak velocity (deg/s)')+
theme(legend.position = 'none')
####Multiple Comparisons----
dataset %>%
filter(subject=='xL16',as.numeric(blocknum)>2,amp.bins.15=='(30,45]') %>%
ggboxplot(dataset, x = "blocknum", y='abs(peak.gaze.velocity)',
color = "blocknum", palette = "npg",
# facet.by = c("subject","amp.bins.15"), short.panel.labs = TRUE)
facet.by = c("subject","amp.bins.15"), short.panel.labs = TRUE) +
stat_compare_means(label.y=700)+
stat_compare_means(comparisons = list(c('5','6'),c('5','7'),c('6','7')))+
# stat_compare_means(label = "p.signif")+
xlab('Time point')+
ylab('Gaze peak velocity (deg/s)')+
theme(legend.position = 'none')
toPlot<-filter(dataset,
as.numeric(blocknum)>2,
amp.bins.15=='(30,45]',
subject==subjects[i])
for (i in seq_along(subjects)){
fn<- paste0(filenames,subjects[i],'.pdf')
toPlot<-filter(dataset,
as.numeric(blocknum)>2,
amp.bins.15=='(30,45]',
subject==subjects[i])
for (j in seq_along(fn)){
saveXL(toPlot,fn[j],widt=5,height=5,
y=yvars[j],ylabel=ylabs[j],
ylabspot=ylabspot[j])
}
}
dataset %>%
filter(subject %in% subjects) %>%
mutate(blocknum=as.numeric(blocknum)) %>%
filter(blocknum>2) %>%
mutate(blocknum=blocknum-4)->
dolivia
for (i in seq_along(subjects)){
fn<- paste0(filenames,subjects[i],'.pdf')
toPlot<-filter(dolivia,
as.numeric(blocknum)>2,
amp.bins.15=='(30,45]',
subject==subjects[i])
for (j in seq_along(fn)){
saveXL(toPlot,fn[j],widt=5,height=5,
y=yvars[j],ylabel=ylabs[j],
ylabspot=ylabspot[j])
}
}
unique(dolivia$block)
unique(dolivia$blocknum)
for (i in seq_along(subjects)){
fn<- paste0(filenames,subjects[i],'.pdf')
toPlot<-filter(dolivia,
amp.bins.15=='(30,45]',
subject==subjects[i])
for (j in seq_along(fn)){
saveXL(toPlot,fn[j],widt=5,height=5,
y=yvars[j],ylabel=ylabs[j],
ylabspot=ylabspot[j])
}
}
for (i in seq_along(subjects)){
fn<- paste0(filenames,subjects[i],'.pdf')
toPlot<-filter(dolivia,
# amp.bins.15=='(30,45]',
subject==subjects[i])
for (j in seq_along(fn)){
saveXL(toPlot,fn[j],widt=5,height=5,
y=yvars[j],ylabel=ylabs[j],
ylabspot=ylabspot[j])
}
}
plot(1:10)
dir.off()
dev.off()
plot(1:10)
for (i in seq_along(subjects)){
fn<- paste0(filenames,subjects[i],'.pdf')
toPlot<-filter(dolivia,
# amp.bins.15=='(30,45]',
subject==subjects[i])
for (j in seq_along(fn)){
saveXL(toPlot,fn[j],widt=15,height=5,
y=yvars[j],ylabel=ylabs[j],
ylabspot=ylabspot[j])
}
}
def.off(_
def.off()
dev.off()
# hm <- readRDS('dashboardData3-3-2018.RDS')
hm <- readRDS('dashboardData2018-03-19.RDS')
samplerate<- 304.7508/1000
hm %>%
mutate(gaze.onset.ms=(gaze.onset-200)/samplerate,
head.onset.ms=(head.onset-200)/samplerate,
gaze.dur.ms=(gaze.dur)/samplerate,
IEPr=IEP*sign(gaze.amp),
gaze.gain=gaze.amp/target.amp) %>%
filter(missing.gs<15,
gaze.onset.ms>150,
gaze.onset.ms<500,
abs(peak.gaze.velocity) > 200) %>%
ungroup() %>%
select(peak.gaze.velocity,
gaze.onset.ms,
head.onset.ms,
gaze.dur.ms,
gaze.gain,
peak.head.velocity,
head.contribution,
gaze.amp,
gaze.dur,
subject,
block,
blocknum,
trialnum,
target.amp,
head.amp,
IEPr,
gaze.steps,
total.gaze.amp,
total.gaze.dur,
total.head.contribution)->
hpp
hpp <- mutate(hpp,amp.bins.20 = cut(abs(target.amp),breaks=c(0,20,40,60,80)))
hpp <- mutate(hpp,amp.bins.15 = cut(abs(target.amp),breaks=c(0,15,30,45,60,75,90)))
hpp <- mutate(hpp,amp.bins.10 = cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
hpp <- mutate(hpp,gaze.amp.bins.10 = cut(abs(gaze.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
#remove NA bins and extra blocks
hpp %>%
filter(!is.na(amp.bins.15))->
hpp
hpp %>%
mutate(blocknum= as.factor(blocknum),
block= as.factor(block),
subject=as.factor(subject))->
dataset
dataset %>%
filter(subject %in% subjects) %>%
mutate(blocknum=as.numeric(blocknum)) %>%
filter(blocknum>2) %>%
mutate(blocknum=blocknum-4)->
dolivia
for (i in seq_along(subjects)){
fn<- paste0(filenames,subjects[i],'.pdf')
toPlot<-filter(dolivia,
# amp.bins.15=='(30,45]',
subject==subjects[i])
for (j in seq_along(fn)){
saveXL(toPlot,fn[j],widt=15,height=5,
y=yvars[j],ylabel=ylabs[j],
ylabspot=ylabspot[j])
}
}
dataset %>%
filter(subject %in% subjects,
gaze.gain>0) %>%
mutate(blocknum=as.numeric(blocknum)) %>%
filter(blocknum>2) %>%
mutate(blocknum=blocknum-4)->
dolivia
for (i in seq_along(subjects)){
fn<- paste0(filenames,subjects[i],'.pdf')
toPlot<-filter(dolivia,
# amp.bins.15=='(30,45]',
subject==subjects[i])
for (j in seq_along(fn)){
saveXL(toPlot,fn[j],widt=15,height=5,
y=yvars[j],ylabel=ylabs[j],
ylabspot=ylabspot[j])
}
}
ylabspot<- c(700,50,650,650,3,3)
for (i in seq_along(subjects)){
fn<- paste0(filenames,subjects[i],'.pdf')
toPlot<-filter(dolivia,
# amp.bins.15=='(30,45]',
subject==subjects[i])
for (j in seq_along(fn)){
saveXL(toPlot,fn[j],widt=15,height=5,
y=yvars[j],ylabel=ylabs[j],
ylabspot=ylabspot[j])
}
}
for (i in seq_along(subjects)){
fn<- paste0(filenames,subjects[i],'.pdf')
toPlot<-filter(dolivia,
# amp.bins.15=='(30,45]',
subject==subjects[i])
for (j in seq_along(fn)){
saveXL(toPlot,fn[j],widt=15,height=5,
y=yvars[j],ylabel=ylabs[j],
ylabspot=ylabspot[j])
}
}
