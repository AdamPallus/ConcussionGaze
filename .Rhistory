ungroup() %>%
select(peak.gaze.velocity,
gaze.onset.ms,
head.onset.ms,
gaze.dur.ms,
gaze.gain,
anti_saccade,
peak.head.velocity,
head.contribution,
gaze.amp,
gaze.dur,
subject,
block,
blocknum,
trialnum,
target.amp,
head.amp,
IEPr,
gaze.steps,
total.gaze.amp,
total.gaze.dur,
total.head.contribution)->
hpp
# hpp <- mutate(hpp,amp.bins.combined=cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80)))
hpp <- mutate(hpp,amp.bins.20 = cut(abs(target.amp),breaks=c(0,20,40,60,80)))
hpp <- mutate(hpp,amp.bins.15 = cut(abs(target.amp),breaks=c(0,15,30,45,60,75,90)))
hpp <- mutate(hpp,amp.bins.10 = cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
hpp <- mutate(hpp,gaze.amp.bins.10 = cut(abs(gaze.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
#remove NA bins and extra blocks
hpp %>%
filter(!is.na(amp.bins.15))->
hpp
hpp %>%
mutate(blocknum= as.factor(blocknum),
block= as.factor(block),
subject=as.factor(subject))->
dataset
#antisaccade success rate
dataset %>%
group_by(subject,block) %>%
summarize(total=n(),
nAnti=sum(anti_saccade),
percent_anti=nAnti/total)->
assuc
head(assuc)
write.csv(assuc,'AntiSaccadeSuccessRate.csv')
dataset %>%
group_by(subject,block) %>%
summarize(total=n(),
nAnti=sum(anti_saccade),
percent_anti=nAnti/total)->
assuc
kable(assuc)
library(plotly)
library(ggplot2)
library(dplyr)
library(stringr)
library(ggpubr)
library(knitr)
source('knighthelperfunctions.R')
samplerate<- 304.7508/1000
dataset %>%
group_by(subject,block) %>%
summarize(total=n(),
nAnti=sum(anti_saccade),
percent_anti=nAnti/total)->
assuc
kable(assuc)
dataset %>%
group_by(subject,block) %>%
summarize(total=n(),
nAnti=sum(anti_saccade),
percent_anti=nAnti/total)->
assuc
kable(assuc,digits=2)
ggplot(assuc)+
geom_point(aes(block,percent_anti),size=2)
ggplot(assuc)+
geom_bar(aes(block,percent_anti),size=2)
ggplot(assuc)+
geom_bar(aes(block,percent_anti),size=2,stat='identity')
ggplot(assuc)+
geom_bar(aes(block,percent_anti,color=subject),size=2,stat='identity')
ggplot(assuc)+
geom_bar(aes(block,percent_anti,fill=subject,color=blocknum),size=2,stat='identity')
ggplot(assuc)+
geom_bar(aes(block,percent_anti,fill=subject),size=2,stat='identity')
ggplot(assuc)+
geom_bar(aes(block,percent_anti,fill=subject),size=2,stat='identity')+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(assuc)+
geom_bar(aes(block,percent_anti,fill=subject),size=2,stat='identity')+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
ylab('Anti-saccade Sucess Rate')
ggplot(assuc)+
geom_bar(aes(block,total,fill=subject),size=2,stat='identity')+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
ylab('Total Number of Accepted Trials')
#mean.latency=mean(gaze.onset.ms),
#mean.dur=mean(gaze.dur.ms),
#mean.gain=mean(gaze.gain),
#mean.steps=mean(gaze.steps),
median_gv=median(abs(peak.gaze.velocity)),
dataset %>%
group_by(block) %>%
summarize(#mean.gv=mean(abs(peak.gaze.velocity)),
#mean.latency=mean(gaze.onset.ms),
#mean.dur=mean(gaze.dur.ms),
#mean.gain=mean(gaze.gain),
#mean.steps=mean(gaze.steps),
median_gv=median(abs(peak.gaze.velocity)),
median_latency=median(gaze.onset.ms),
median_dur=median(gaze.dur.ms),
median_gain=median(gaze.gain),
median_steps=median(gaze.steps),
sd_gv=sd(abs(peak.gaze.velocity)),
sd_latency=sd(gaze.onset.ms),
sd_dur=sd(gaze.dur.ms),
sd_gain=sd(gaze.gain),
sd_steps=sd(gaze.steps),
n=n()) ->
blockmeasurements
dataset %>%
group_by(block,amp.bins.15) %>%
summarize(#mean.gv=mean(abs(peak.gaze.velocity)),
#mean.latency=mean(gaze.onset.ms),
#mean.dur=mean(gaze.dur.ms),
#mean.gain=mean(gaze.gain),
#mean.steps=mean(gaze.steps),
median_gv=median(abs(peak.gaze.velocity)),
median_latency=median(gaze.onset.ms),
median_dur=median(gaze.dur.ms),
median_gain=median(gaze.gain),
median_steps=median(gaze.steps),
sd_gv=sd(abs(peak.gaze.velocity)),
sd_latency=sd(gaze.onset.ms),
sd_dur=sd(gaze.dur.ms),
sd_gain=sd(gaze.gain),
sd_steps=sd(gaze.steps),
n=n()) ->
blockmeasurements
kable(blockmeasurements)
qplot(gaze.gain,data=dataset)
dataset %>%
group_by(block,anti_saccade,amp.bins.15) %>%
summarize(#mean.gv=mean(abs(peak.gaze.velocity)),
#mean.latency=mean(gaze.onset.ms),
#mean.dur=mean(gaze.dur.ms),
#mean.gain=mean(gaze.gain),
#mean.steps=mean(gaze.steps),
median_gv=median(abs(peak.gaze.velocity)),
median_latency=median(gaze.onset.ms),
median_dur=median(gaze.dur.ms),
median_gain=median(gaze.gain),
median_steps=median(gaze.steps),
sd_gv=sd(abs(peak.gaze.velocity)),
sd_latency=sd(gaze.onset.ms),
sd_dur=sd(gaze.dur.ms),
sd_gain=sd(gaze.gain),
sd_steps=sd(gaze.steps),
n=n()) ->
blockmeasurements
kable(blockmeasurements)
dataset %>%
filter(anti_saccade) %>%
group_by(block,anti_saccade,amp.bins.15) %>%
summarize(#mean.gv=mean(abs(peak.gaze.velocity)),
#mean.latency=mean(gaze.onset.ms),
#mean.dur=mean(gaze.dur.ms),
#mean.gain=mean(gaze.gain),
#mean.steps=mean(gaze.steps),
median_gv=median(abs(peak.gaze.velocity)),
median_latency=median(gaze.onset.ms),
median_dur=median(gaze.dur.ms),
median_gain=median(gaze.gain),
median_steps=median(gaze.steps),
sd_gv=sd(abs(peak.gaze.velocity)),
sd_latency=sd(gaze.onset.ms),
sd_dur=sd(gaze.dur.ms),
sd_gain=sd(gaze.gain),
sd_steps=sd(gaze.steps),
n=n()) ->
blockmeasurements
kable(blockmeasurements)
dataset %>%
filter(!anti_saccade) %>%
group_by(block,anti_saccade,amp.bins.15) %>%
summarize(#mean.gv=mean(abs(peak.gaze.velocity)),
#mean.latency=mean(gaze.onset.ms),
#mean.dur=mean(gaze.dur.ms),
#mean.gain=mean(gaze.gain),
#mean.steps=mean(gaze.steps),
median_gv=median(abs(peak.gaze.velocity)),
median_latency=median(gaze.onset.ms),
median_dur=median(gaze.dur.ms),
median_gain=median(gaze.gain),
median_steps=median(gaze.steps),
sd_gv=sd(abs(peak.gaze.velocity)),
sd_latency=sd(gaze.onset.ms),
sd_dur=sd(gaze.dur.ms),
sd_gain=sd(gaze.gain),
sd_steps=sd(gaze.steps),
n=n()) ->
blockmeasurements
kable(blockmeasurements)
?kruskal.test
getstats<- function(d,form){
nblocks<-length(unique(d$blocknum))
p.gv=-10
p.latency= 10
p.dur = -10
p.gain = -10
p.steps = -10
if (nblocks == 2){
p.gv=wilcox.test(abs(peak.gaze.velocity) ~ blocknum,data=d)$p.value
p.latency= wilcox.test(gaze.onset.ms ~ blocknum,data=d)$p.value
p.dur = wilcox.test(gaze.dur ~ blocknum,data=d)$p.value
p.gain = wilcox.test(gaze.gain ~ blocknum,data=d)$p.value
p.steps = wilcox.test(gaze.steps ~ blocknum,data=d)$p.value
}
if (nblocks > 2){
p.gv=kruskal.test(abs(peak.gaze.velocity) ~ blocknum,data=d)$p.value
p.latency= kruskal.test(gaze.onset.ms ~ blocknum,data=d)$p.value
p.dur = kruskal.test(gaze.dur.ms ~ blocknum,data=d)$p.value
p.gain = kruskal.test(gaze.gain ~ blocknum,data=d)$p.value
p.steps = kruskal.test(gaze.steps ~ blocknum,data=d)$p.value
}
# return(list(p.gv,p.latency,p.dur,p.gain,p.steps))
l<-list(p.gv,p.latency,p.dur,p.gain,p.steps)
l[is.na(l)]<- 10
l<- as.data.frame(l)
names(l) <- c('p.gv','p.latency','p.dur','p.gain','p.steps')
l
}
dataset %>%
filter(anti_saccade) %>%
group_by(block,amp.bins.15) %>%
do(getstats(.))->
pvals
kable(pvals,digits=3)
dataset %>%
filter(anti_saccade) %>%
group_by(subject,amp.bins.15) %>%
do(getstats(.))->
pvals
kable(pvals,digits=3)
getstats<- function(d,form){
nblocks<-length(unique(d$blocknum))
p.gv= -10
p.latency= -10
p.dur = -10
p.gain = -10
p.steps = -10
if (nblocks == 2){
p.gv=wilcox.test(abs(peak.gaze.velocity) ~ blocknum,data=d)$p.value
p.latency= wilcox.test(gaze.onset.ms ~ blocknum,data=d)$p.value
p.dur = wilcox.test(gaze.dur ~ blocknum,data=d)$p.value
p.gain = wilcox.test(gaze.gain ~ blocknum,data=d)$p.value
p.steps = wilcox.test(gaze.steps ~ blocknum,data=d)$p.value
}
if (nblocks > 2){
p.gv=kruskal.test(abs(peak.gaze.velocity) ~ blocknum,data=d)$p.value
p.latency= kruskal.test(gaze.onset.ms ~ blocknum,data=d)$p.value
p.dur = kruskal.test(gaze.dur.ms ~ blocknum,data=d)$p.value
p.gain = kruskal.test(gaze.gain ~ blocknum,data=d)$p.value
p.steps = kruskal.test(gaze.steps ~ blocknum,data=d)$p.value
}
# return(list(p.gv,p.latency,p.dur,p.gain,p.steps))
l<-list(p.gv,p.latency,p.dur,p.gain,p.steps)
l[is.na(l)]<- 10
l<- as.data.frame(l)
names(l) <- c('p.gv','p.latency','p.dur','p.gain','p.steps')
l
}
dataset %>%
filter(anti_saccade) %>%
group_by(subject,amp.bins.15) %>%
do(getstats(.))->
pvals
kable(pvals,digits=3)
kable(pvals,digits=6)
dataset %>%
filter(anti_saccade) %>%
group_by(block,anti_saccade,amp.bins.15) %>%
summarize(#mean.gv=mean(abs(peak.gaze.velocity)),
#mean.latency=mean(gaze.onset.ms),
#mean.dur=mean(gaze.dur.ms),
#mean.gain=mean(gaze.gain),
#mean.steps=mean(gaze.steps),
median_gv=median(abs(peak.gaze.velocity)),
median_latency=median(gaze.onset.ms),
median_dur=median(gaze.dur.ms),
median_gain=median(gaze.gain),
median_steps=median(gaze.steps),
sd_gv=sd(abs(peak.gaze.velocity)),
sd_latency=sd(gaze.onset.ms),
sd_dur=sd(gaze.dur.ms),
sd_gain=sd(gaze.gain),
sd_steps=sd(gaze.steps),
n=n()) ->
blockmeasurements
kable(blockmeasurements,digits=3)
dataset %>%
filter(anti_saccade) %>%
group_by(block,anti_saccade,amp.bins.15) %>%
summarize(#mean.gv=mean(abs(peak.gaze.velocity)),
#mean.latency=mean(gaze.onset.ms),
#mean.dur=mean(gaze.dur.ms),
#mean.gain=mean(gaze.gain),
#mean.steps=mean(gaze.steps),
median_gv=median(abs(peak.gaze.velocity)),
median_latency=median(gaze.onset.ms),
median_dur=median(gaze.dur.ms),
median_gain=median(gaze.gain),
median_steps=median(gaze.steps),
sd_gv=sd(abs(peak.gaze.velocity)),
sd_latency=sd(gaze.onset.ms),
sd_dur=sd(gaze.dur.ms),
sd_gain=sd(gaze.gain),
sd_steps=sd(gaze.steps),
n=n()) ->
blockmeasurements
kable(blockmeasurements,digits=2)
pvals %>%
filter(p.gv<0.05|p.latency<0.05|p.dur<0.05|p.gain<0.05|p.steps<0.05) %>%
kable(digits=6)
pvals %>%
filter(p.gv<0.05|p.latency<0.05|p.dur<0.05|p.gain<0.05|p.steps<0.05,
p.gv>-10) %>%
kable(digits=6)
library(plotly)
library(ggplot2)
library(dplyr)
source('knighthelperfunctions.R')
samplerate<- 304.7508/1000
path<- "F:/dropbox/kdata/test/"
# path<- "C:/users/setup/dropbox/kdata/test/"
h<-loadnewheadfree(path=path)
# h<- select(h,1:13)
# names(h)<- c('G','GV','H','HV','E','EV','time','Targ','block','subject','blocknum','task')
h1<- filter(h,blocknum=='1')
h2<- filter(h,blocknum=='2')
ggplotly(
htest1 %>%
filter(time>40000,time<120000) %>%
ggplot()+
# geom_line(aes(time,E))+
geom_line(aes(time,G),color='darkgreen')+
geom_line(aes(time,H),color='blue',alpha=0.8)+
geom_line(aes(time,E),color='red',alpha=0.8)+
geom_line(aes(time,Targ))+
ylab('Position (deg)')+
# ggtitle('Eye Gain = 0.87')+
geom_hline(yintercept = c(-58,58))+
ylim(-80,80)+
ggtitle('Recalibrated Data'))
# htest<- AdjustCalibration(h,headoffset= 3,
#                           eyeoffset=2.8,
#                           # eyegain=0.621,
#                           eyegain=0.72,
#                           headgain=1,
#                           applyfilter=FALSE)
#CP48ST1
htest1<- AdjustCalibration(h1,headoffset= 0,
eyeoffset=0,
eyegain=0.7,
headgain=.73 ,
applyfilter=FALSE)
#CP48ST2
htest2<- AdjustCalibration(h2,headoffset= 2,
eyeoffset=0,
eyegain=.77,
headgain=.8 ,
applyfilter=FALSE)
recal<-rbind(htest1,htest2)
filter<-dplyr::filter
# h %>%
#   mutate(time=row_number()) %>%
#   filter(time>50) %>%
#   mutate(Ecal=E*egain+eoffset)->
#   htest
ggplotly(
htest1 %>%
filter(time>40000,time<120000) %>%
ggplot()+
# geom_line(aes(time,E))+
geom_line(aes(time,G),color='darkgreen')+
geom_line(aes(time,H),color='blue',alpha=0.8)+
geom_line(aes(time,E),color='red',alpha=0.8)+
geom_line(aes(time,Targ))+
ylab('Position (deg)')+
# ggtitle('Eye Gain = 0.87')+
geom_hline(yintercept = c(-58,58))+
ylim(-80,80)+
ggtitle('Recalibrated Data'))
help smooth
?smooth
path<- "F:/dropbox/kdata/test/"
# path<- "C:/users/setup/dropbox/kdata/test/"
h<-loadnewheadfree(path=path)
# h<- select(h,1:13)
# names(h)<- c('G','GV','H','HV','E','EV','time','Targ','block','subject','blocknum','task')
h1<- filter(h,blocknum=='1')
h2<- filter(h,blocknum=='2')
# htest<- AdjustCalibration(h,headoffset= 3,
#                           eyeoffset=2.8,
#                           # eyegain=0.621,
#                           eyegain=0.72,
#                           headgain=1,
#                           applyfilter=FALSE)
#CP48ST1
htest1<- AdjustCalibration(h1,headoffset= 0,
eyeoffset=0,
eyegain=0.7,
headgain=.73 ,
applyfilter=FALSE)
#CP48ST2
htest2<- AdjustCalibration(h2,headoffset= 2,
eyeoffset=0,
eyegain=.77,
headgain=.8 ,
applyfilter=FALSE)
recal<-rbind(htest1,htest2)
filter<-dplyr::filter
# h %>%
#   mutate(time=row_number()) %>%
#   filter(time>50) %>%
#   mutate(Ecal=E*egain+eoffset)->
#   htest
recal%>%
select(G,H,Targ,block,subject,task,blocknum)%>%
group_by(block) %>%
filter(!is.na(G)) %>%
mutate(time=row_number(),
Graw=G,
G=replace(smooth(G,"3R"),G==0,NA), #mark missing data as NA rather than 0
Gnospline=G,
G= applyspline(G,6),
target.velocity=parabolicdiff(Targ,7)*samplerate,
Gv=parabolicdiff(G,7)*samplerate, #calculate velocity
Hv=parabolicdiff(H,7)*samplerate,
# gazeshifts=markMovementsDouble(Gv,threshold1=100,threshold2=10),
gazeshifts=markSaccadesDouble(Gv,threshold1=100,threshold2=20,
driftcorrect = TRUE,markFixations = FALSE),
headmovement=markMovementsDouble(Hv,threshold1=10,threshold2=4)) %>%
do(markTagetMovements(t=.,buffer=200,threshold=200,trial.length=500))%>%
filter(!is.na(trialnum))->
recal
#measure trials join to previous table if needed
recal%>%
filter(!is.na(trialnum)) %>%
group_by(task,subject,block,trialnum) %>%
do(measureTrial(.))->
hm
install.packages('rmatlab')
install.packages('Rmatlab')
install.packages('R,matlab')
install.packages('R,Matlab')
install.packages('R.matlab')
library(R.matlab)
head(t)
head(x)
x<-readMat('20170817-04.mat')
readh5
library(h5)
install.package('h5')
install.packages('h5')
library(h5)
x<-h5file('20170817-04.mat')
x<-h5file('20170817-04.mat','-4')
x<-h5file('20170817-04.mat','-r')
x<-h5file('20170817-04.mat','r')
install.packages('matio')
install.packages('MATIO')
install.packages('rhdf5')
?h5file
h5file('20170817-05.mat')
x<-readMat('20170817-05.mat')
x<-read.csv('20170817-05.mat')
x<-readMat('20170817-05.mat',verbose = TRUE)
?readMat
h5file('20170817-05.mat','r')
h5file('20170817-05.mat','a')
h5file('20170817-05.mat','x')
writeMat(1:10,'test.mat')
writeMat(data.frame(x=1:10),'test.mat')
x<-data.frame(xx=1:10)
x
writeMat(x,'test.mat')
writeMat(x)
readMat.default('20170817-04.mat')
readMat.default('20170817-04.mat','-v6')
read.mat('20170817-04.mat')
install.packages('rmatio')
library(matio)
library(rmmatio)
library(rmmatio)
library(rmatio)
read.mat('20170817-04.mat')
read.mat('b.mat')
x<-read.csv('b.mat')
head(x)
str(x)
x$X..Created.by.Octave.4.4.0
xx<-x$X..Created.by.Octave.4.4.0
str(xx)
head(h1)
head(h1,20)
h1$Targ[1:100]
h1$Targ[1:1000]
first(h1$time[h1$Targ>0])
12168/304
