hpp <- mutate(hpp,amp.bins.15 = cut(abs(target.amp),breaks=c(0,15,30,45,60,75,90)))
hpp <- mutate(hpp,amp.bins.10 = cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
hpp <- mutate(hpp,gaze.amp.bins.10 = cut(abs(gaze.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
#remove NA bins and extra blocks
hpp %>%
filter(!is.na(amp.bins.15))->
hpp
hpp %>%
mutate(blocknum= as.factor(blocknum),
block= as.factor(block),
subject=as.factor(subject))->
dataset
getstats<- function(d,form){
nblocks<-length(unique(d$blocknum))
p.gv=-10
p.latency= 10
p.dur = -10
p.gain = -10
p.steps = -10
if (nblocks == 2){
p.gv=wilcox.test(abs(peak.gaze.velocity) ~ blocknum,data=d)$p.value
p.latency= wilcox.test(gaze.onset.ms ~ blocknum,data=d)$p.value
p.dur = wilcox.test(gaze.dur ~ blocknum,data=d)$p.value
p.gain = wilcox.test(gaze.gain ~ blocknum,data=d)$p.value
p.steps = wilcox.test(gaze.steps ~ blocknum,data=d)$p.value
}
if (nblocks > 2){
p.gv=kruskal.test(abs(peak.gaze.velocity) ~ blocknum,data=d)$p.value
p.latency= kruskal.test(gaze.onset.ms ~ blocknum,data=d)$p.value
p.dur = kruskal.test(gaze.dur.ms ~ blocknum,data=d)$p.value
p.gain = kruskal.test(gaze.gain ~ blocknum,data=d)$p.value
p.steps = kruskal.test(gaze.steps ~ blocknum,data=d)$p.value
}
# return(list(p.gv,p.latency,p.dur,p.gain,p.steps))
l<-list(p.gv,p.latency,p.dur,p.gain,p.steps)
l[is.na(l)]<- 10
l<- as.data.frame(l)
names(l) <- c('p.gv','p.latency','p.dur','p.gain','p.steps')
d %>%
summarize(mean.gv=mean(abs(peak.gaze.velocity)),
mean.latency=mean(gaze.onset.ms),
mean.dur=mean(gaze.dur.ms),
mean.gain=mean(gaze.gain),
mean.steps=mean(gaze.steps),
sd.gv=sd(abs(peak.gaze.velocity)),
sd.latency=sd(gaze.onset.ms),
sd.dur=sd(gaze.dur.ms),
sd.gain=sd(gaze.gain),
sd.steps=sd(gaze.steps),
n=n()) %>%
bind_cols(l)->
l
return(l)
}
dataset %>%
group_by(block,amp.bins.15) %>%
do(getstats(.)) ->
stats.table
head(stats.table)
getstats<- function(d,form){
nblocks<-length(unique(d$blocknum))
p.gv=-10
p.latency= 10
p.dur = -10
p.gain = -10
p.steps = -10
if (nblocks == 2){
p.gv=wilcox.test(abs(peak.gaze.velocity) ~ blocknum,data=d)$p.value
p.latency= wilcox.test(gaze.onset.ms ~ blocknum,data=d)$p.value
p.dur = wilcox.test(gaze.dur ~ blocknum,data=d)$p.value
p.gain = wilcox.test(gaze.gain ~ blocknum,data=d)$p.value
p.steps = wilcox.test(gaze.steps ~ blocknum,data=d)$p.value
}
if (nblocks > 2){
p.gv=kruskal.test(abs(peak.gaze.velocity) ~ blocknum,data=d)$p.value
p.latency= kruskal.test(gaze.onset.ms ~ blocknum,data=d)$p.value
p.dur = kruskal.test(gaze.dur.ms ~ blocknum,data=d)$p.value
p.gain = kruskal.test(gaze.gain ~ blocknum,data=d)$p.value
p.steps = kruskal.test(gaze.steps ~ blocknum,data=d)$p.value
}
# return(list(p.gv,p.latency,p.dur,p.gain,p.steps))
l<-list(p.gv,p.latency,p.dur,p.gain,p.steps)
l[is.na(l)]<- 10
l<- as.data.frame(l)
names(l) <- c('p.gv','p.latency','p.dur','p.gain','p.steps')
d %>%
summarize(median_gv=median(abs(peak.gaze.velocity)),
median_latency=median(gaze.onset.ms),
median_dur=median(gaze.dur.ms),
median_gain=median(gaze.gain),
median_steps=median(gaze.steps),
sd.gv=sd(abs(peak.gaze.velocity)),
sd.latency=sd(gaze.onset.ms),
sd.dur=sd(gaze.dur.ms),
sd.gain=sd(gaze.gain),
sd.steps=sd(gaze.steps),
n=n()) %>%
bind_cols(l)->
l
return(l)
}
dataset %>%
group_by(block,amp.bins.15) %>%
do(getstats(.)) ->
stats.table
head(stats.table)
names(stats.table)
stats.table2<-select(stats.table,-starts_with("p.")
stats.table2<-select(stats.table,-starts_with("p."))
stats.table2
write.csv(stats.table2,'Anti-saccade_MediansandN.csv')
# load data in 'global' chunk so it can be shared by all users of the dashboard
library(ggplot2)
library(mgcv)
library(plotly)
library(ggpubr)
# dataset <- diamonds
# dataset <- readRDS('KnightData3-2-2018.RDS')
# dataset <- readRDS('KnightBoxplotData3-2-2018.RDS')
# hm <- readRDS('dashboardData3-3-2018.RDS')
hm <- readRDS('dashboardData2018-03-19.RDS')
samplerate<- 304.7508/1000
hm %>%
mutate(gaze.onset.ms=(gaze.onset-200)/samplerate,
head.onset.ms=(head.onset-200)/samplerate,
gaze.dur.ms=(gaze.dur)/samplerate,
IEPr=IEP*sign(gaze.amp),
gaze.gain=gaze.amp/target.amp) %>%
filter(missing.gs<15,
gaze.onset.ms>150,
gaze.onset.ms<500,
abs(peak.gaze.velocity) > 200) %>%
ungroup() %>%
select(peak.gaze.velocity,
gaze.onset.ms,
head.onset.ms,
gaze.dur.ms,
gaze.gain,
peak.head.velocity,
head.contribution,
gaze.amp,
gaze.dur,
subject,
block,
blocknum,
trialnum,
target.amp,
head.amp,
IEPr,
gaze.steps,
total.gaze.amp,
total.gaze.dur,
total.head.contribution)->
hpp
# hpp <- mutate(hpp,amp.bins.combined=cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80)))
hpp <- mutate(hpp,amp.bins.20 = cut(abs(target.amp),breaks=c(0,20,40,60,80)))
hpp <- mutate(hpp,amp.bins.15 = cut(abs(target.amp),breaks=c(0,15,30,45,60,75,90)))
hpp <- mutate(hpp,amp.bins.10 = cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
hpp <- mutate(hpp,gaze.amp.bins.10 = cut(abs(gaze.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
#remove NA bins and extra blocks
hpp %>%
filter(!is.na(amp.bins.15))->
hpp
hpp %>%
mutate(blocknum= as.factor(blocknum),
block= as.factor(block),
subject=as.factor(subject))->
dataset
unique(dataset$subject)
goodsubjects<-c('Cj21','Fq58','wR49','CP48','VO35','xL16')
dataset<-filter(dataset,subject %in% goodsubjects)
dataset %>%
group_by(block,amp.bins.15) %>%
do(getstats(.)) %>%
select(-starts_with("p."))->
stats.table
write.csv(stats.table,'Saccade Task Means and ns.csv')
head(dataset)
# load data in 'global' chunk so it can be shared by all users of the dashboard
library(ggplot2)
library(mgcv)
library(plotly)
library(ggpubr)
library(stringr)
# dataset <- diamonds
# dataset <- readRDS('KnightData3-2-2018.RDS')
# dataset <- readRDS('KnightBoxplotData3-2-2018.RDS')
# hm <- readRDS('dashboardData3-3-2018.RDS')
# hm <- readRDS('dashboardData2018-03-19.RDS')
# hm <- readRDS('antisaccadeDashboard2018-3-29.RDS')
hm <- readRDS('antisaccadeDashboard2018-4-07.RDS')
samplerate<- 304.7508/1000
hm %>%
mutate(blocknum=as.factor(str_sub(block,7)),
gaze.onset.ms=(gaze.onset-200)/samplerate,
head.onset.ms=(head.onset-200)/samplerate,
gaze.dur.ms=(gaze.dur)/samplerate,
IEPr=IEP*sign(gaze.amp),
gaze.gain=gaze.amp/target.amp,
anti_saccade=(gaze.amp*target.amp)<0) %>%
filter(missing.gs<15,
gaze.onset.ms>150,
gaze.onset.ms<500,
abs(peak.gaze.velocity) > 200) %>%
ungroup() %>%
select(peak.gaze.velocity,
gaze.onset.ms,
head.onset.ms,
gaze.dur.ms,
gaze.gain,
anti_saccade,
peak.head.velocity,
head.contribution,
gaze.amp,
gaze.dur,
subject,
block,
blocknum,
trialnum,
target.amp,
head.amp,
IEPr,
gaze.steps,
total.gaze.amp,
total.gaze.dur,
total.head.contribution)->
hpp
# hpp <- mutate(hpp,amp.bins.combined=cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80)))
hpp <- mutate(hpp,amp.bins.20 = cut(abs(target.amp),breaks=c(0,20,40,60,80)))
hpp <- mutate(hpp,amp.bins.15 = cut(abs(target.amp),breaks=c(0,15,30,45,60,75,90)))
hpp <- mutate(hpp,amp.bins.10 = cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
hpp <- mutate(hpp,gaze.amp.bins.10 = cut(abs(gaze.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
#remove NA bins and extra blocks
hpp %>%
filter(!is.na(amp.bins.15))->
hpp
hpp %>%
mutate(blocknum= as.factor(blocknum),
block= as.factor(block),
subject=as.factor(subject))->
dataset
names(dataset)
dataset %>%
group_by(block,amp.bins.15,anti_saccade) %>%
do(getstats(.)) %>%
select(-starts_with("p."))->
stats.table
head(stats.table)
nrow(stats.table)
write.csv(stats.table,'AntisaccadeMediansSeparated.csv')
library(ggplot2)
library(dplyr)
library(broom)
source('knighthelperfunctions.R')
samplerate<- 304.7508/1000
path<- "F:/dropbox/kdata/newform/"
h<-loadnewheadfree(path=path)
h%>%
select(G,H,Targ,block,subject,task,blocknum)%>%
group_by(block) %>%
filter(!is.na(G)) %>%
mutate(time=row_number(),
Graw=G,
G=replace(smooth(G,"3R"),G==0,NA), #mark missing data as NA rather than 0
Gnospline=G,
G= applyspline(G,6),
target.velocity=parabolicdiff(Targ,7)*samplerate,
Gv=parabolicdiff(G,7)*samplerate, #calculate velocity
Hv=parabolicdiff(H,7)*samplerate,
# gazeshifts=markMovementsDouble(Gv,threshold1=100,threshold2=10),
gazeshifts=markSaccadesDouble(Gv,threshold1=100,threshold2=20,
driftcorrect = TRUE,markFixations = FALSE),
headmovement=markMovementsDouble(Hv,threshold1=10,threshold2=4)) %>%
do(markTagetMovements(t=.,buffer=200,threshold=200,trial.length=500))%>%
filter(!is.na(trialnum))->
h
names(h)
h<-AdjustCalibration(h)
names(h)
h%>%
select(G,H,Targ,block,subject,task,blocknum)%>%
group_by(block) %>%
filter(!is.na(G)) %>%
mutate(time=row_number(),
Graw=G,
G=replace(smooth(G,"3R"),G==0,NA), #mark missing data as NA rather than 0
Gnospline=G,
G= applyspline(G,6),
target.velocity=parabolicdiff(Targ,7)*samplerate,
Gv=parabolicdiff(G,7)*samplerate, #calculate velocity
Hv=parabolicdiff(H,7)*samplerate,
# gazeshifts=markMovementsDouble(Gv,threshold1=100,threshold2=10),
gazeshifts=markSaccadesDouble(Gv,threshold1=100,threshold2=20,
driftcorrect = TRUE,markFixations = FALSE),
headmovement=markMovementsDouble(Hv,threshold1=10,threshold2=4)) %>%
do(markTagetMovements(t=.,buffer=200,threshold=200,trial.length=500))%>%
filter(!is.na(trialnum))->
h
h<-loadnewheadfree(path=path)
h %>%
group_by(block) %>%
do(AdjustCalibration(.,applyfilter = FALSE)) %>%
do(fixH(.)) %>%
mutate(G=H+E)->
ht
fixH<- function(t){
mod<- lm(H~poly(time,3),data=t)
t %>%
mutate(H=H-predict(mod,newdata=t))->
t
return(t)
}
h %>%
group_by(block) %>%
do(AdjustCalibration(.,applyfilter = FALSE)) %>%
do(fixH(.)) %>%
mutate(G=H+E)->
ht
?poly
poly<-stats::poly
h %>%
group_by(block) %>%
do(AdjustCalibration(.,applyfilter = FALSE)) %>%
do(fixH(.)) %>%
mutate(G=H+E)->
ht
qplot(time,E,data=ht,color=block,geom='line')
qplot(time,E,data=ht,color=block,geom='line')
dev.off()
dev.off()
qplot(time,E,data=ht,color=block,geom='line')
h<-ht
h%>%
select(G,H,Targ,block,subject,task,blocknum)%>%
group_by(block) %>%
filter(!is.na(G)) %>%
mutate(time=row_number(),
Graw=G,
G=replace(smooth(G,"3R"),G==0,NA), #mark missing data as NA rather than 0
Gnospline=G,
G= applyspline(G,6),
target.velocity=parabolicdiff(Targ,7)*samplerate,
Gv=parabolicdiff(G,7)*samplerate, #calculate velocity
Hv=parabolicdiff(H,7)*samplerate,
# gazeshifts=markMovementsDouble(Gv,threshold1=100,threshold2=10),
gazeshifts=markSaccadesDouble(Gv,threshold1=100,threshold2=20,
driftcorrect = TRUE,markFixations = FALSE),
headmovement=markMovementsDouble(Hv,threshold1=10,threshold2=4)) %>%
do(markTagetMovements(t=.,buffer=200,threshold=200,trial.length=500))%>%
filter(!is.na(trialnum))->
h
filter<-dplyr::filter
h%>%
select(G,H,Targ,block,subject,task,blocknum)%>%
group_by(block) %>%
filter(!is.na(G)) %>%
mutate(time=row_number(),
Graw=G,
G=replace(smooth(G,"3R"),G==0,NA), #mark missing data as NA rather than 0
Gnospline=G,
G= applyspline(G,6),
target.velocity=parabolicdiff(Targ,7)*samplerate,
Gv=parabolicdiff(G,7)*samplerate, #calculate velocity
Hv=parabolicdiff(H,7)*samplerate,
# gazeshifts=markMovementsDouble(Gv,threshold1=100,threshold2=10),
gazeshifts=markSaccadesDouble(Gv,threshold1=100,threshold2=20,
driftcorrect = TRUE,markFixations = FALSE),
headmovement=markMovementsDouble(Hv,threshold1=10,threshold2=4)) %>%
do(markTagetMovements(t=.,buffer=200,threshold=200,trial.length=500))%>%
filter(!is.na(trialnum))->
h
h%>%
select(G,H,Targ,block,subject,task,blocknum)%>%
group_by(block) %>%
filter(!is.na(G)) %>%
mutate(time=row_number(),
Graw=G,
G=replace(smooth(G,"3R"),G==0,NA), #mark missing data as NA rather than 0
Gnospline=G,
G= applyspline(G,6),
target.velocity=parabolicdiff(Targ,7)*samplerate,
Gv=parabolicdiff(G,7)*samplerate, #calculate velocity
Hv=parabolicdiff(H,7)*samplerate,
# gazeshifts=markMovementsDouble(Gv,threshold1=100,threshold2=10),
gazeshifts=markSaccadesDouble(Gv,threshold1=100,threshold2=20,
driftcorrect = TRUE,markFixations = FALSE),
headmovement=markMovementsDouble(Hv,threshold1=10,threshold2=4)) %>%
do(markTagetMovements(t=.,buffer=200,threshold=200,trial.length=500))%>%
filter(!is.na(trialnum))->
h
h %>%
ungroup() %>%
mutate(Targ=replace(Targ,task=='AS' &  counter<200,0))->
h
h %>%
filter(!is.na(trialnum)) %>%
group_by(task,subject,block,trialnum) %>%
do(measureTrial(.))->
hm
nrow(hm)
hm %>%
mutate(recenter=(task=='AS' & abs(IGP)>10)) %>%
filter(!recenter) %>%
select(-recenter)->
hm
nrow(hm)
tt<-readRDS('antisaccadeDashboard2018-3-29.RDS')
head(tt)
head(hm)
names(hm)
names(tt)
tt<-readRDS('antisaccadeDashboard2018-4-07.RDS')
head(tt)
names(tt)
hma<-hm
hm<-select(hm,-blocknum)
hm<-rbind(tt,hm)
saveRDS(hm,''antisaccadeDashboard2018-4-22.RDS'')
saveRDS(hm,''antisaccadeDashboard2018-4-22.RDS')
saveRDS(hm,'antisaccadeDashboard2018-4-22.RDS')
# load data in 'global' chunk so it can be shared by all users of the dashboard
library(ggplot2)
library(mgcv)
library(plotly)
library(ggpubr)
library(stringr)
# dataset <- diamonds
# dataset <- readRDS('KnightData3-2-2018.RDS')
# dataset <- readRDS('KnightBoxplotData3-2-2018.RDS')
# hm <- readRDS('dashboardData3-3-2018.RDS')
# hm <- readRDS('dashboardData2018-03-19.RDS')
# hm <- readRDS('antisaccadeDashboard2018-3-29.RDS')
# hm <- readRDS('antisaccadeDashboard2018-4-07.RDS')
hm <- readRDS('antisaccadeDashboard2018-4-22.RDS')
samplerate<- 304.7508/1000
hm %>%
mutate(blocknum=as.factor(str_sub(block,7)),
gaze.onset.ms=(gaze.onset-200)/samplerate,
head.onset.ms=(head.onset-200)/samplerate,
gaze.dur.ms=(gaze.dur)/samplerate,
IEPr=IEP*sign(gaze.amp),
gaze.gain=gaze.amp/target.amp,
anti_saccade=(gaze.amp*target.amp)<0) %>%
filter(missing.gs<15,
gaze.onset.ms>150,
gaze.onset.ms<500,
abs(peak.gaze.velocity) > 200) %>%
ungroup() %>%
select(peak.gaze.velocity,
gaze.onset.ms,
head.onset.ms,
gaze.dur.ms,
gaze.gain,
anti_saccade,
peak.head.velocity,
head.contribution,
gaze.amp,
gaze.dur,
subject,
block,
blocknum,
trialnum,
target.amp,
head.amp,
IEPr,
gaze.steps,
total.gaze.amp,
total.gaze.dur,
total.head.contribution)->
hpp
# hpp <- mutate(hpp,amp.bins.combined=cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80)))
hpp <- mutate(hpp,amp.bins.20 = cut(abs(target.amp),breaks=c(0,20,40,60,80)))
hpp <- mutate(hpp,amp.bins.15 = cut(abs(target.amp),breaks=c(0,15,30,45,60,75,90)))
hpp <- mutate(hpp,amp.bins.10 = cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
hpp <- mutate(hpp,gaze.amp.bins.10 = cut(abs(gaze.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
#remove NA bins and extra blocks
hpp %>%
filter(!is.na(amp.bins.15))->
hpp
hpp %>%
mutate(blocknum= as.factor(blocknum),
block= as.factor(block),
subject=as.factor(subject))->
dataset
library(ggplot2)
library(dplyr)
library(broom)
source('knighthelperfunctions.R')
samplerate<- 304.7508/1000
path<- "F:/dropbox/kdata/newform/"
h<-loadnewheadfree(path=path)
h %>%
group_by(block) %>%
do(AdjustCalibration(.,applyfilter = FALSE)) %>%
do(fixH(.)) %>%
mutate(G=H+E)->
ht
fixH<- function(t){
mod<- lm(H~poly(time,3),data=t)
t %>%
mutate(H=H-predict(mod,newdata=t))->
t
return(t)
}
h %>%
group_by(block) %>%
do(AdjustCalibration(.,applyfilter = FALSE)) %>%
do(fixH(.)) %>%
mutate(G=H+E)->
ht
qplot(time,E,data=ht,color=block,geom='line')
qplot(time,E,data=ht %>% filter(time<10000),color=block,geom='line')
