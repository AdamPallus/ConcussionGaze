ggtitle('Positions calculated from Velocity with Head Gain 1.2'))
ggplotly(
h %>%
filter(time>500,time<13000) %>%
mutate(Hvcalc=cumsum(Hv*1.121)/samplerate/1000+3,
Gvcalc=Hvcalc+E) %>%
ggplot()+
geom_line(aes(time,Gvcalc),color='darkgreen')+
geom_line(aes(time,Hvcalc),color='blue')+
geom_hline(yintercept = c(-60,60))+
ylab('Position (deg)')+
ggtitle('Head Gain 1.121 and offset 3 deg right'))
ggplotly(
h %>%
filter(time>500,time<13000) %>%
mutate(Hvcalc=cumsum(HV*1.121)/samplerate/1000+3,
Gvcalc=Hvcalc+E) %>%
ggplot()+
geom_line(aes(time,Gvcalc),color='darkgreen')+
geom_line(aes(time,Hvcalc),color='blue')+
geom_hline(yintercept = c(-60,60))+
ylab('Position (deg)')+
ggtitle('Head Gain 1.121 and offset 3 deg right'))
ggplotly(
h %>%
filter(time>500,time<13000) %>%
mutate(Hvcalc=cumsum(HV*1)/samplerate/1000+3,
Gvcalc=Hvcalc+E) %>%
ggplot()+
geom_line(aes(time,Gvcalc),color='darkgreen')+
geom_line(aes(time,Hvcalc),color='blue')+
geom_hline(yintercept = c(-60,60))+
ylab('Position (deg)')+
ggtitle('Head Gain 1.121 and offset 3 deg right'))
htest<-h
htest %>%
dplyr::filter(time>500) %>%
dplyr::mutate(Hcalc=cumsum(HV*1)/samplerate/1000+3,
Gcalc=Hcalc+E)->
htest
ggplotly(
htest %>%
filter(time<13000)%>%
ggplot()+
geom_line(aes(time,Gcalc),color='darkgreen')+
geom_line(aes(time,Hcalc),color='blue')+
# geom_hline(yintercept = c(-58,58))+
geom_line(aes(time,Targ),size=2,alpha=0.5)+
ylab('Position (deg)')+
ggtitle('Positions calculated from Velocity'))
nrow(htest)
ggplotly(
htest %>%
filter(time>nrow(htest)-13000)%>%
ggplot()+
geom_line(aes(time,Gcalc),color='darkgreen')+
geom_line(aes(time,Hcalc),color='blue')+
# geom_hline(yintercept = c(-58,58))+
geom_line(aes(time,Targ),size=2,alpha=0.5)+
ylab('Position (deg)')+
ggtitle('Positions calculated from Velocity'))
filterButter<- function(y,freqs=0.0005,type='high'){
require(signal)
bf <- butter(2, freqs,type=type)
# bf <- butter(2, c(.0005,.006))
return(filtfilt(bf, htest$HV))
}
?filter
ggplot(htest)+
# geom_line(aes(time,Gcalc),color='darkgreen')+
geom_point(aes(time,Hcalc),color='black',alpha=0.5)+
geom_hline(yintercept = 0,color='red')+
ylim(-10,10)
htest %>%
mutate(Hfilt=filterButter(Hcalc))->
htest
filter(htest,time<5)
library(dplyr)
namespace(dplyr)
namespace('dplyr')
filter<- dplyr::filter()
filter()<-dplyr::filter
filter(htest,time<5)
dplyr::filter(htest,time<5)
filter<-dplyr::filter
filter(htest,time<5)
ggplot(htest)+
# geom_line(aes(time,Gcalc),color='darkgreen')+
geom_point(aes(time,Hfilt),color='black',alpha=0.5)+
geom_hline(yintercept = 0,color='red')+
ylim(-10,10)
ggplot(dplyr::filter(htest,time<12000))+
# geom_line(aes(time,Gcalc),color='darkgreen')+
geom_line(aes(time,Gcalc2),color='black',alpha=0.5)+
geom_line(aes(time,Gcalc),color='darkgreen',alpha=0.5)+
geom_hline(yintercept = c(-58,0,58),color='red')
ggplot(dplyr::filter(htest,time<12000))+
# geom_line(aes(time,Gcalc),color='darkgreen')+
geom_line(aes(time,Hfilt),color='blue',alpha=0.5)+
geom_line(aes(time,Hfilt+E),color='darkgreen',alpha=0.5)+
geom_hline(yintercept = c(-58,0,58),color='red')
htest %>%
mutate(Hfilt=filterButter(Hcalc,freqs=0.0001))->
htest
ggplot(dplyr::filter(htest,time<12000))+
# geom_line(aes(time,Gcalc),color='darkgreen')+
geom_line(aes(time,Hfilt),color='blue',alpha=0.5)+
geom_line(aes(time,Hfilt+E),color='darkgreen',alpha=0.5)+
geom_hline(yintercept = c(-58,0,58),color='red')
filterButter<- function(y,freqs=0.0005,type='high'){
require(signal)
bf <- butter(2, freqs,type=type)
# bf <- butter(2, c(.0005,.006))
return(filtfilt(bf, y))
}
htest %>%
mutate(Hfilt=filterButter(Hcalc,freqs=0.0005))->
htest
ggplot(htest)+
# geom_line(aes(time,Gcalc),color='darkgreen')+
geom_point(aes(time,Hfilt),color='black',alpha=0.5)+
geom_hline(yintercept = 0,color='red')+
ylim(-10,10)
ggplot(dplyr::filter(htest,time<12000))+
# geom_line(aes(time,Gcalc),color='darkgreen')+
geom_line(aes(time,Hfilt),color='blue',alpha=0.5)+
geom_line(aes(time,Hfilt+E),color='darkgreen',alpha=0.5)+
geom_hline(yintercept = c(-58,0,58),color='red')
ggplot(dplyr::filter(htest,time<12000))+
# geom_line(aes(time,Gcalc),color='darkgreen')+
geom_line(aes(time,Hcalc),color='blue',alpha=0.5)+
geom_line(aes(time,Hfilt+E),color='darkgreen',alpha=0.5)+
geom_hline(yintercept = c(-58,0,58),color='red')
htest %>%
dplyr::filter(time>500) %>%
dplyr::mutate(Hcalc=cumsum(HV*1)/samplerate/1000+3,
Gcalc=Hcalc+E)->
htest
ggplotly(
htest %>%
filter(time>nrow(htest)-13000)%>%
ggplot()+
geom_line(aes(time,Gcalc),color='darkgreen')+
geom_line(aes(time,Hcalc),color='blue')+
# geom_hline(yintercept = c(-58,58))+
geom_line(aes(time,Targ),size=2,alpha=0.5)+
ylab('Position (deg)')+
ggtitle('Positions calculated from Velocity'))
ggplotly(
htest %>%
filter(time>nrow(htest)-13000)%>%
ggplot()+
geom_line(aes(time,Gcalc),color='darkgreen')+
geom_line(aes(time,Hcalc),color='blue')+
geom_hline(yintercept = c(-58,58),color='red')+
geom_line(aes(time,Targ),size=2,alpha=0.5)+
ylab('Position (deg)')+
ggtitle('Positions calculated from Velocity'))
ggplotly(
htest %>%
filter(time>nrow(htest)-13000)%>%
ggplot()+
geom_line(aes(time,Gcalc),color='darkgreen')+
geom_line(aes(time,Hcalc),color='blue')+
geom_hline(yintercept = c(-58,58),color='red'))
ggplotly(
htest %>%
mutate(Hfilt=filterButter(Hcalc),
Gfilt=Hfilt+E)%>%
filter(time>nrow(htest)-13000)%>%
ggplot()+
geom_line(aes(time,Gcalc),color='darkgreen')+
geom_line(aes(time,Hcalc),color='blue')+
geom_hline(yintercept = c(-58,58),color='red'))
ggplotly(
htest %>%
mutate(Hfilt=filterButter(Hcalc),
Gfilt=Hfilt+E)%>%
filter(time>nrow(htest)-13000)%>%
ggplot()+
geom_line(aes(time,Gfilt),color='darkgreen')+
geom_line(aes(time,Hfilt),color='blue')+
geom_hline(yintercept = c(-58,58),color='red'))
ggplotly(
htest %>%
mutate(Hfilt=filterButter(Hcalc,freqs=0.0001),
Gfilt=Hfilt+E)%>%
filter(time>nrow(htest)-13000)%>%
ggplot()+
geom_line(aes(time,Gfilt),color='darkgreen')+
geom_line(aes(time,Hfilt),color='blue')+
geom_hline(yintercept = c(-58,58),color='red'))
ggplotly(
htest %>%
mutate(Hfilt=filterButter(Hcalc,freqs=0.00007),
Gfilt=Hfilt+E)%>%
filter(time>nrow(htest)-13000)%>%
ggplot()+
geom_line(aes(time,Gfilt),color='darkgreen')+
geom_line(aes(time,Hfilt),color='blue')+
geom_hline(yintercept = c(-58,58),color='red'))
ggplotly(
htest %>%
mutate(Hfilt=filterButter(Hcalc,freqs=0.00007),
Gfilt=Hfilt+E)%>%
filter(time<13000)%>%
ggplot()+
geom_line(aes(time,Gfilt),color='darkgreen')+
geom_line(aes(time,Hfilt),color='blue')+
geom_hline(yintercept = c(-58,58),color='red'))
0.00007*samplerate
samplerate
AdjustCalibration<-function(h,eyegain=1,headgain=1,eyeoffset=0,headoffset=0,
filterfreq=0.00007,skipsamples=500,samplerate=0.3047508){
require(dplyr)
require(signal) #for butterworth
filter<-dplyr::filter
filterButter<- function(y,freqs=0.00007,type='high'){
require(signal)
bf <- butter(2, freqs,type=type)
# bf <- butter(2, c(.0005,.006))
return(filtfilt(bf, y))
}
h %>%
mutate(time=row_number()) %>%
filter(time>skipsamples) %>%
mutate(H=cumsum(HV*headgain)/samplerate/1000+headoffset,
H=filterButter(H,freqs=0.00007),
E=E*eyegain+eyeoffset
G=H+E)->
h
}
AdjustCalibration<-function(h,eyegain=1,headgain=1,eyeoffset=0,headoffset=0,
filterfreq=0.00007,skipsamples=500,samplerate=0.3047508){
require(dplyr)
require(signal) #for butterworth
filter<-dplyr::filter
filterButter<- function(y,freqs=0.00007,type='high'){
require(signal)
bf <- butter(2, freqs,type=type)
# bf <- butter(2, c(.0005,.006))
return(filtfilt(bf, y))
}
h %>%
mutate(time=row_number()) %>%
filter(time>skipsamples) %>%
mutate(H=cumsum(HV*headgain)/samplerate/1000+headoffset,
H=filterButter(H,freqs=0.00007),
E=E*eyegain+eyeoffset
G=H+E)->
h
AdjustCalibration<-function(h,eyegain=1,headgain=1,eyeoffset=0,headoffset=0,
filterfreq=0.00007,skipsamples=500,samplerate=0.3047508){
require(dplyr)
require(signal) #for butterworth
filter<-dplyr::filter
filterButter<- function(y,freqs=0.00007,type='high'){
require(signal)
bf <- butter(2, freqs,type=type)
# bf <- butter(2, c(.0005,.006))
return(filtfilt(bf, y))
}
h %>%
mutate(time=row_number()) %>%
filter(time>skipsamples) %>%
mutate(H=cumsum(HV*headgain)/samplerate/1000+headoffset,
H=filterButter(H,freqs=0.00007),
E=E*eyegain+eyeoffset,
G=H+E)->
h
}
source('~/knight/ConcussionGaze/knighthelperfunctions.R', echo=TRUE)
library(plotly)
library(ggplot2)
library(dplyr)
source('knighthelperfunctions.R')
samplerate<- 304.7508/1000
path<- "F:/dropbox/kdata/testanti/"
h<-loadnewheadfree(path=path)
names(h)
loadnewheadfree<- function(referencefile=NULL,path="~/GitHub/ConcussionGaze/kdata/"){
require(stringr)
require(dplyr)
require(data.table)
#This function loads .csv files in a particular folder. They must have the same columns for rbind
#Saves time by only reading the csv when necessary
#get names of all files in path
files <- list.files(path=path,pattern='*.txt')
#extract neuron name eg. Bee-01
# names<-sapply(files, str_match,"^[a-zA-Z]+-[0-9]+",USE.NAMES=FALSE)
names<-sapply(files, str_match,"^[a-zA-Z0-9]+",USE.NAMES=FALSE)
# check for new cells
if (!is.null(referencefile)){
files<-files[!names %in% referencefile$neuron] #comparison
}
nfiles<-length(files)
if (nfiles>0){
message(c('New Files: ',files))
loadedfiles <- lapply(paste(path,files,sep=''),read.csv,sep='\t',header=FALSE)
t<-data.frame()
temp<- NULL
# t.old<-NULL
for (i in 1:nfiles) {
f<- files[i]
message(paste('Loading:',f))
# temp[[i]]=loadedfiles[[i]]
# names<-str_match(f,"(^[a-zA-Z]+)-([0-9]+)")
# loadedfiles[[i]]$block<-names[1]
# loadedfiles[[i]]$subject<-names[2]
# loadedfiles[[i]]$blocknum<-as.numeric(names[3])
#updated for 2-25-2018
#remove extra rows
loadedfiles[[i]]<- select(loadedfiles[[i]],1:8)
#files are named with Subject ID bU07 and block ST1 with ST standing for Saccade Task
names<-str_match(f,"(^[a-zA-Z0-9]{4})([a-zA-Z0-9]{3})")
loadedfiles[[i]]$block<-names[1]
loadedfiles[[i]]$subject<-names[2]
loadedfiles[[i]]$blocknum<-as.numeric(str_sub(names[3],3))
task<-str_sub(names[3],1,2)
loadedfiles[[i]]$task<- task
if (task=='AS'){ #antisaccade dask needs target data fixed
#'There are three targets in the anti saccade files
#'but only the second is useful. The central fixation is always at zero
#'If this changes, the value in V7 should be used instead of zero
targ<- loadedfiles[[i]]$V8
targ<- replace(targ,targ< -80,0)
loadedfiles[[i]]$V8=targ
}
}
t <-rbindlist(loadedfiles,fill = TRUE)
# t<- dplyr::select(t, -thp,-tvp,-time)
}else{
message('********NO NEW DATA********')
t<-NULL
}
names(t)<- c('G','GV','H','HV','E','EV','samples','Targ','block','subject','blocknum','task')
t %>%
mutate(time=row_number())->
t
return(t)
}
h<-loadnewheadfree(path=path)
names(h)
ha<- AdjustCalibration(h,headoffset=3)
ggplotly(ggplot(filter(h,time<13000))+
geom_line(aes(time,HV/10),color='blue',linetype=2)+
geom_line(aes(time,H),color='blue')+
geom_hline(yintercept = c(-60,60))+
ylab('Head Position (deg)'))
filter<-dplyr::filter
ggplotly(ggplot(filter(h,time<13000))+
geom_line(aes(time,HV/10),color='blue',linetype=2)+
geom_line(aes(time,H),color='blue')+
geom_hline(yintercept = c(-60,60))+
ylab('Head Position (deg)'))
ggplotly(ggplot(filter(ha,time<13000))+
geom_line(aes(time,HV/10),color='blue',linetype=2)+
geom_line(aes(time,H),color='blue')+
geom_hline(yintercept = c(-60,60))+
ylab('Head Position (deg)'))
AdjustCalibration<-function(h,eyegain=1,headgain=1,eyeoffset=0,headoffset=0,
applyfilter=TRUE,filterfreq=0.00007,skipsamples=500,
samplerate=0.3047508){
require(dplyr)
require(signal) #for butterworth
filter<-dplyr::filter
filterButter<- function(y,freqs=0.00007,type='high'){
require(signal)
bf <- butter(2, freqs,type=type)
# bf <- butter(2, c(.0005,.006))
return(filtfilt(bf, y))
}
h %>%
mutate(time=row_number()) %>%
filter(time>skipsamples) %>%
mutate(H=cumsum(HV*headgain)/samplerate/1000+headoffset)->
h
if (applyfilter){
h <-mutate(h,H=filterButter(H,freqs=filterfreq))
}
h %>%
mutate(E=E*eyegain+eyeoffset,
G=H+E)->
h
}
names(h)
h$samples[1000]
h$samples[2000]-h$samples[1000]
h$samples[2000]-h$samples[1000]/1000
(h$samples[2000]-h$samples[1000])/1000
h<-loadnewheadfree(path=path)
h<- AdjustCalibration(h,headoffset=3)
h%>%
select(G,H,Targ,block,subject,task)%>%
group_by(block) %>%
filter(!is.na(G)) %>%
mutate(time=row_number(),
Graw=G,
G=replace(smooth(G,"3R"),G==0,NA), #mark missing data as NA rather than 0
Gnospline=G,
G= applyspline(G,6),
target.velocity=parabolicdiff(Targ,7)*samplerate,
Gv=parabolicdiff(G,7)*samplerate, #calculate velocity
Hv=parabolicdiff(H,7)*samplerate,
gazeshifts=markMovementsDouble(Gv,threshold1=100,threshold2=10),
headmovement=markMovementsDouble(Hv,threshold1=10,threshold2=4)) %>%
do(markTagetMovements(t=.,buffer=200,threshold=200,trial.length=500))%>%
filter(!is.na(trialnum))->
h
h %>%
ungroup() %>%
mutate(Targ=replace(Targ,task=='AS' &  counter<200,0))->
h
h %>%
filter(!is.na(trialnum)) %>%
group_by(task,subject,block,trialnum) %>%
do(measureTrial(.))->
hm
qplot(IGP,data=hm)
#Based on the previous report, I'm rejecting trials with 20 or more interpolated data points during the detected primary gaze shift, and trials where the latency is too short or too long. These ranges can be adjusted if future investigation warrants.
hm %>%
mutate(gaze.onset.ms=(gaze.onset-200)/samplerate) %>%
filter(missing.gs<20,
gaze.onset.ms>150,
gaze.onset.ms<500) %>%
ungroup()->
hpp
hpp <- mutate(hpp,amp.bins.combined=cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80)))
hpp <- mutate(hpp,amp.bins.combined=cut(abs(target.amp),breaks=c(0,20,40,60,80)))
ggplot(filter(hpp,!is.na(amp.bins.combined)))+
geom_boxplot(aes(amp.bins.combined,abs(peak.gaze.velocity),fill=block))+
ylab('Peak gaze shift velocity (deg/s)')+
xlab('Target amplitude bins combined left and right (deg)')+
theme_minimal()+
ggtitle('comparison of pre and post peak gaze velocity')+
facet_wrap(~subject,ncol=1)
#
# ggplot(hpp,aes(abs(target.amp),abs(peak.gaze.velocity),color=block))+
#   geom_point()+
#   stat_smooth(method='lm')+
#   ylab('Peak gaze shift velocity (deg/s)')+
#   xlab('Target Amplitude (deg)')+
#   theme_minimal()+
#   ggtitle('comparison of pre and post peak gaze velocity')+
#   facet_wrap(~subject,ncol=1)
ggplot(filter(hpp,!is.na(amp.bins.combined)))+
geom_boxplot(aes(amp.bins.combined,gaze.onset.ms,fill=block))+
ylab('Gaze Shift Latency (ms)')+
xlab('Target amplitude bins combined left and right (deg)')+
theme_minimal()+
ggtitle('comparison of pre and post mean Gaze latency')+
facet_wrap(~subject,ncol=1)
# ggplot(hpp,aes(abs(target.amp),gaze.onset.ms,color=block))+
#   geom_point()+
#   ylab('Gaze Shift Latency (ms)')+
#   xlab('Target amplitude combined left and right (deg)')+
#   stat_smooth(method='lm')+
#   theme_minimal()+
#   ggtitle('comparison of pre and post mean Gaze latency')+
#   facet_wrap(~subject,ncol=1)
ggplot(filter(hpp,!is.na(amp.bins.combined)))+
geom_boxplot(aes(amp.bins.combined,abs(gaze.amp),fill=block))+
ylab('Primary Gaze amplitude (deg)')+
xlab('Target amplitude bins combined left and right (deg)')+
theme_minimal()+
ggtitle('comparison of pre and post peak gaze gain')+
facet_wrap(~subject,ncol=1)
# ggplot(hpp,aes(abs(target.amp),abs(gaze.amp),color=block))+
#   geom_point()+
#   stat_smooth(method='lm')+
#   ylab('Primary Gaze amplitude (deg)')+
#   xlab('Target Amplitude (deg)')+
#   theme_minimal()+
#   ggtitle('comparison of pre and post peak gaze gain')+
#   facet_wrap(~subject,ncol=1)
hpp %>%
filter(head.onset<gaze.onset+100,
head.onset>gaze.onset) %>%
mutate(head.onset.ms=(head.onset-200)/samplerate)->
hphead
hphead %>%
filter(!is.na(amp.bins.combined)) %>%
ggplot()+
geom_boxplot(aes(amp.bins.combined,head.onset.ms,fill=block))+
ylab('Head movement latency (ms)')+
xlab('Target amplitude bins combined left and right (deg)')+
theme_minimal()+
ggtitle('comparison of pre and post mean Head latency')+
facet_wrap(~subject,ncol=1)
# ggplot(hphead,aes(abs(target.amp),abs(head.onset.ms),color=block))+
#   geom_point()+
#   stat_smooth(method='lm')+
#   ylab('Head Movement latency (ms)')+
#   xlab('Target Amplitude (deg)')+
#   theme_minimal()+
#   ggtitle('comparison of pre and post mean Head latency')+
#   facet_wrap(~subject,ncol=1)
ggplot(filter(hphead,!is.na(amp.bins.combined)))+
geom_boxplot(aes(amp.bins.combined,abs(peak.head.velocity),fill=block))+
ylab('Peak head velocity (deg/s)')+
xlab('Target amplitude bins combined left and right (deg)')+
theme_minimal()+
ggtitle('comparison of pre and post mean Head peak velocity')+
facet_wrap(~subject,ncol=1)
# ggplot(hphead,aes(abs(target.amp),abs(peak.head.velocity),color=block))+
#   geom_point()+
#   stat_smooth(method='lm')+
#   ylab('Peak Head Velocity (deg/s)')+
#   xlab('Target Amplitude (deg)')+
#   theme_minimal()+
#   ggtitle('comparison of pre and post mean Head peak velocity')+
#   facet_wrap(~subject,ncol=1)
